<?xml version="1.0" ?><tp:spec xmlns:tp="http://telepathy.freedesktop.org/wiki/DbusSpec#extensions-v0" xmlns:xi="http://www.w3.org/2001/XInclude">

<tp:title>Client interfaces</tp:title>

<node name="/Client" xml:base="../spec/Client.xml">
  <tp:copyright>Copyright © 2008-2009 Collabora Ltd.</tp:copyright>
  <tp:copyright>Copyright © 2008-2009 Nokia Corporation</tp:copyright>
  <tp:license xmlns="http://www.w3.org/1999/xhtml">
    <p>This library is free software; you can redistribute it and/or
      modify it under the terms of the GNU Lesser General Public
      License as published by the Free Software Foundation; either
      version 2.1 of the License, or (at your option) any later version.</p>

    <p>This library is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
      Lesser General Public License for more details.</p>

    <p>You should have received a copy of the GNU Lesser General Public
      License along with this library; if not, write to the Free Software
      Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
      02110-1301, USA.</p>
  </tp:license>

  <interface name="org.freedesktop.Telepathy.Client">
    <tp:added version="0.17.26">(as a stable interface)</tp:added>

    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      <p>Telepathy clients use connection managers, the channel dispatcher
        and optionally the account manager to provide useful
        functionality.</p>

      <p>User interface processes are the obvious example of Telepathy
        clients, but they can provide other functionality, such as
        address-book synchronization.</p>

      <p>Every running or activatable process with a well-known
        name of the form org.freedesktop.Telepathy.Client.<em>clientname</em>
        should be probed by the channel dispatcher to discover its
        capabilities. Each client is either an <em>observer</em>, an
        <em>approver</em>, a <em>channel handler</em>, or some combination
        of these.</p>

      <tp:rationale>
        <p>Activatable services (those with a D-Bus <code>.service</code>
          file) must be supported so that we can run clients
          in response to channel creation.</p>

        <p>Non-activatable services (those that do not register a D-Bus
          <code>.service</code> file for their well-known name, but do
          request it at runtime) must be supported so that we can have
          programs that process channels, but only if they are already
          running - for instance, a full-screen media centre
          application might do this.</p>
      </tp:rationale>

      <p>The client name, <em>clientname</em>, MUST be a non-empty string of
        ASCII digits, letters, dots and/or underscores, starting with a
        letter, and without sets of two consecutive dots or a dot
        followed by a digit. For non-activatable services, it MAY contain a
        part that is generated per instance at runtime.</p>

      <tp:rationale>
        <p>If each of a client Foo's instances should be able to manipulate
          channels separately, the instance with unique name
          <code>:1.25</code> might request a well-known name like
          <code>org.freedesktop.Telepathy.Client.Foo._1._25</code>.</p>

        <p>(Note that well-known bus-name components may not start with a
          digit, so o.f.T.Client.Foo.1.25 would not be acceptable.)</p>
      </tp:rationale>

      <p>Each Client MUST export an object whose object path may be
        determined by replacing '.' with '/' in the well-known name and
        prepending '/'. This object represents its API as a Telepathy
        client; the channel dispatcher will call its methods and read
        its properties when appropriate.</p>

      <p>As an optimization, activatable clients SHOULD install a file
        <code><a href="http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html">$XDG_DATA_DIRS</a>/telepathy/clients/<em>clientname</em>.client</code>
        containing a cached version of its immutable properties,
        so that for most clients, the channel dispatcher can
        just read a file to discover capabilities, instead of
        having to service-activate the client immediately in order to fetch
        its read-only properties. However, the D-Bus API is canonical, and
        the channel dispatcher MUST support clients without such a file.</p>

      <p>Non-activatable clients MAY install a <code>.client</code> file,
        but there's not much point in them doing so.</p>

      <p>The .client files MUST contain UTF-8 text with the same syntax
        as
        <a href="http://standards.freedesktop.org/desktop-entry-spec/latest/">Desktop
          Entry files</a> (although the allowed groups, keys and values differ).
        Every <code>.client</code> file MUST contain a group whose name is
        the name of this interface.</p>

      <p>The groups, keys and values in the <code>.client</code> file are
        defined by individual interfaces. Each interface that can usefully
        cache information in the <code>.client</code> file SHOULD correspond
        to a group with the same name.</p>
    </tp:docstring>

    <property access="read" name="Interfaces" tp:name-for-bindings="Interfaces" tp:type="DBus_Interface[]" type="as">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>A list of the extra interfaces provided by this client.
          This SHOULD include at least one of
          <tp:dbus-ref namespace="org.freedesktop.Telepathy">Client.Observer</tp:dbus-ref>,
          <tp:dbus-ref namespace="org.freedesktop.Telepathy">Client.Approver</tp:dbus-ref> or
          <tp:dbus-ref namespace="org.freedesktop.Telepathy">Client.Handler</tp:dbus-ref>.</p>

        <p>In the <code>.client</code> file, this is represented by key
          &quot;<code>Interfaces</code>&quot; in the group named after this interface.
          The value of the key is a list of interface names each followed by
          a semicolon (so it always ends with a semicolon unless it is empty),
          i.e. a key of type &quot;strings&quot; as described in the Desktop Entry
          specification.</p>
      </tp:docstring>
    </property>

  </interface>
</node>
<node name="/Client_Observer" xml:base="../spec/Client_Observer.xml">
  <tp:copyright>Copyright © 2008-2009 Collabora Ltd.</tp:copyright>
  <tp:copyright>Copyright © 2008-2009 Nokia Corporation</tp:copyright>
  <tp:license xmlns="http://www.w3.org/1999/xhtml">
    <p>This library is free software; you can redistribute it and/or
      modify it under the terms of the GNU Lesser General Public
      License as published by the Free Software Foundation; either
      version 2.1 of the License, or (at your option) any later version.</p>

    <p>This library is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
      Lesser General Public License for more details.</p>

    <p>You should have received a copy of the GNU Lesser General Public
      License along with this library; if not, write to the Free Software
      Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
      02110-1301, USA.</p>
  </tp:license>

  <interface name="org.freedesktop.Telepathy.Client.Observer">
    <tp:added version="0.17.26">(as a stable interface)</tp:added>

    <tp:requires interface="org.freedesktop.Telepathy.Client"/>

    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      <p>Observers monitor the creation of new channels. This
        functionality can be used for things like message logging.
        All observers are notified simultaneously.</p>

      <p>Observers SHOULD NOT modify the state of a channel except
        via user interaction.</p>

      <tp:rationale>
        <p>We want Observer UIs for file transfer channels (a progress
          bar for the transfer) to be able to have a Cancel button.</p>
      </tp:rationale>

      <p>Observers MUST NOT carry out actions that exactly one process
        must take responsibility for (e.g. acknowledging Text
        messages, or carrying out the actual transfer in a file transfer
        channel).</p>

      <tp:rationale>
        <p>Since arbitrarily many observers can be activated for
          each channel, it would not make sense for observers to do things
          that can only be done by one process (acknowledging
          <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel.Type">Text</tp:dbus-ref>
          messages, carrying out streaming for
          <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel.Type">StreamedMedia</tp:dbus-ref>
          channels, doing the actual data transfer for file transfers,
          setting up the out-of-band connection for Tubes). The
          <tp:dbus-ref namespace="org.freedesktop.Telepathy.Client">Handler</tp:dbus-ref>
          is responsible for such tasks.</p>

        <p>Handlers MAY, of course, delegate responsibility for these
          tasks to other processes (including those run as observers),
          but this MUST be done explicitly via a request from the Handler
          to the Observer.</p>
      </tp:rationale>

      <p>Whenever a collection of new channels is signalled, the channel
        dispatcher will notify all running or activatable observers whose
        <tp:member-ref>ObserverChannelFilter</tp:member-ref> property
        (possibly as cached in the .client file) indicates that they are
        interested in some of the channels.</p>

      <p>Observers are activated for all channels in which they have
        registered an interest - incoming, outgoing or automatically created -
        although of course the ObserverChannelFilter property can be set
        to filter on the
        <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel">Requested</tp:dbus-ref>
        property.</p>

      <p>Because it might take time for an observer to become ready (for
        instance, a Text logger needs to wait until pending messages have been
        downloaded), the channel dispatcher must wait (up to some timeout) for
        all observers to return from
        <tp:member-ref>ObserveChannels</tp:member-ref> before letting anything
        destructive happen. Destructive things (e.g. acknowledging messages)
        are defined to be done by handlers, therefore HandleWith and Claim
        aren't allowed to succeed until all observers are ready.</p>
    </tp:docstring>

    <property access="read" name="ObserverChannelFilter" tp:name-for-bindings="Observer_Channel_Filter" tp:type="Channel_Class[]" type="aa{sv}">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>A specification of the channels in which this observer is
          interested. The <tp:member-ref>ObserveChannels</tp:member-ref> method
          should be called by the channel dispatcher whenever any of the new
          channels in a <tp:dbus-ref namespace="org.freedesktop.Telepathy.Connection.Interface.Requests">NewChannels</tp:dbus-ref>
          signal match this description.</p>

        <p>Only certain D-Bus types have useful semantics for matching like this,
          so only certain types are allowed:</p>

        <dl>
          <dt>Integers of all sizes, including byte (y, n, q, i, u, x, t)</dt>
          <dd>Matched by numeric value, regardless of type (e.g. 42 as a
            16-bit signed integer 'n' is considered equal to 42 as a 32-bit
            unsigned integer 'u')</dd>

          <dt>Booleans (b)</dt>
          <dd>Matched by equality in the obvious way; not considered equal to any
            other type</dd>

          <dt>Strings (s)</dt>
          <dd>Matched by equality in the obvious way; not considered equal to any
            other type</dd>

          <dt>Object paths (o)</dt>
          <dd>Matched by equality in the obvious way; not considered equal to any
            other type</dd>

        </dl>

        <p>This property never changes while the observer process owns its
          Client bus name. For activatable processes, the filter can change
          due to an upgrade - the channel dispatcher SHOULD observe changes to
          .client files using a mechanism like inotify.</p>

        <tp:rationale>
          <p>Not allowing this property to change is a simplification,
            particularly for activatable processes (we reject the possibility
            that a process with a .client file, when activated, has a filter
            that differs from what its .client file said).</p>

          <p>If an Observer wants to add extra channels to its list of
            interests at runtime, it can register an additional Client bus name
            (for instance, the org.freedesktop.Telepathy.Client.Empathy process
            with unique name :1.42 could additionally register
            org.freedesktop.Telepathy.Client.Empathy._1_42) with additional
            filters. To remove those filters, it can release the bus name;
            it could even re-claim the bus name immediately, with different
            filters.</p>

          <p>The same principle is applied to Approvers and Handlers.</p>
        </tp:rationale>

        <p>For observers that have a .client file, the channel dispatcher
          may discover this property from keys of the form
          <code><em>propertyname</em>/<em>type</em></code>,
          in groups in the .client file whose name is the name of this
          interface followed by <code>.ObserverChannelFilter</code>,
          a space and an ASCII decimal number starting from 0.</p>

        <p>Integers in the .client file are encoded in ASCII decimal, booleans
          are encoded as &quot;true&quot; or &quot;false&quot;, and strings are encoded in the usual
          way for desktop files (including the C-style backslash escapes
          documented in the Desktop Entry specification).</p>

        <p>For instance, a .client file for an observer that is only interested
          in Text channels, with CONTACT or ROOM handles, that were requested by
          a local client:</p>

<pre>
[org.freedesktop.Telepathy.Client]
Interfaces=org.freedesktop.Telepathy.Client.Observer;

[org.freedesktop.Telepathy.Client.Observer.ObserverChannelFilter 0]
org.freedesktop.Telepathy.Channel.Type s=org.freedesktop.Telepathy.Channel.Type.Text
org.freedesktop.Telepathy.Channel.TargetHandleType u=1
org.freedesktop.Telepathy.Channel.Requested b=true

[org.freedesktop.Telepathy.Client.Observer.ObserverChannelFilter 1]
org.freedesktop.Telepathy.Channel.Type s=org.freedesktop.Telepathy.Channel.Type.Text
org.freedesktop.Telepathy.Channel.TargetHandleType u=2
org.freedesktop.Telepathy.Channel.Requested b=true
</pre>

      </tp:docstring>
    </property>

    <method name="ObserveChannels" tp:name-for-bindings="Observe_Channels">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Called by the channel dispatcher when channels in which the
          observer has registered an interest are announced in a <tp:dbus-ref namespace="org.freedesktop.Telepathy.Connection.Interface.Requests">NewChannels</tp:dbus-ref>
          signal.</p>

        <p>If the same NewChannels signal announces some channels that match
          the filter, and some that do not, then only a subset of the channels
          (those that do match the filter) are passed to this method.</p>

        <p>If the channel dispatcher will split up the channels from a single
          NewChannels signal and dispatch them separately (for instance
          because no installed Handler can handle all of them), it will call
          ObserveChannels several times.</p>

        <p>The observer MUST NOT return from this method call until it is ready
          for a handler for the channel to run (which may change the channel's
          state).</p>

        <tp:rationale>
          <p>The channel dispatcher must wait for observers to start up,
            to avoid the following race: text channel logger (observer) gets
            ObserveChannels, text channel handler gets
            <tp:dbus-ref namespace="org.freedesktop.Telepathy.Client.Handler">HandleChannels</tp:dbus-ref>
            channel handler starts up faster and acknowledges messages,
            logger never sees those messages.</p>
        </tp:rationale>

        <p>The channel dispatcher SHOULD NOT change its behaviour based on
          whether this method succeeds or fails: there are no defined D-Bus
          errors for this method, and if it fails, this only indicates that
          an Observer is somehow broken.</p>

        <tp:rationale>
          <p>The expected error response in the channel dispatcher is to
            log a warning, and otherwise continue as though this method
            had succeeded.</p>
        </tp:rationale>
      </tp:docstring>

      <arg direction="in" name="Account" type="o">
        <tp:docstring>
          The
          <tp:dbus-ref namespace="org.freedesktop.Telepathy">Account</tp:dbus-ref>
          with which the channels are associated. The
          well-known bus name to use is that of the
          <tp:dbus-ref namespace="org.freedesktop.Telepathy">AccountManager</tp:dbus-ref>.
        </tp:docstring>
      </arg>

      <arg direction="in" name="Connection" type="o">
        <tp:docstring>
          The
          <tp:dbus-ref namespace="org.freedesktop.Telepathy">Connection</tp:dbus-ref>
          with which the channels are associated. The
          well-known bus name to use can be derived from this object
          path by removing the leading '/' and replacing all subsequent
          '/' by '.'.
        </tp:docstring>
      </arg>

      <arg direction="in" name="Channels" tp:type="Channel_Details[]" type="a(oa{sv})">
        <tp:docstring>
          The <tp:dbus-ref namespace="org.freedesktop.Telepathy">Channel</tp:dbus-ref>s
          and their properties. Their well-known bus names are all the same as
          that of the Connection.
        </tp:docstring>
      </arg>

      <arg direction="in" name="Dispatch_Operation" type="o">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The path to the <tp:dbus-ref namespace="org.freedesktop.Telepathy">ChannelDispatchOperation</tp:dbus-ref>
            for these channels, or the special value '/' if there is no
            ChannelDispatchOperation (because the channels were requested, not
            incoming).</p>

          <p>If the Observer calls <tp:dbus-ref namespace="org.freedesktop.Telepathy.ChannelDispatchOperation">Claim</tp:dbus-ref>
            or <tp:dbus-ref namespace="org.freedesktop.Telepathy.ChannelDispatchOperation">HandleWith</tp:dbus-ref>
            on the dispatch operation, it MUST be careful to avoid deadlock,
            since these methods cannot return until the Observer has returned
            from <tp:member-ref>ObserveChannels</tp:member-ref>.</p>

          <tp:rationale>
            <p>This allows an Observer to <tp:dbus-ref namespace="org.freedesktop.Telepathy.ChannelDispatchOperation">Claim</tp:dbus-ref>
              a set of channels without having to match up calls to this method
              with calls to <tp:dbus-ref namespace="org.freedesktop.Telepathy.Client.Approver">AddDispatchOperation</tp:dbus-ref>.</p>
          </tp:rationale>
        </tp:docstring>
      </arg>

      <arg direction="in" name="Requests_Satisfied" type="ao">
        <tp:docstring>
          The requests satisfied by these channels.

          <tp:rationale>
            If the same process is an Observer and a Handler, it can be useful
            to be given this information as soon as possible (it will also
            be passed to <tp:dbus-ref namespace="org.freedesktop.Telepathy.Client">Handler.HandleChannels</tp:dbus-ref>).
          </tp:rationale>
        </tp:docstring>
      </arg>

      <arg direction="in" name="Observer_Info" type="a{sv}">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>Additional information about these channels. No keys are
            currently defined.</p>

          <p>If keys are defined for this dictionary, all will be optional;
            observers MAY safely ignore any entry in this dictionary.</p>
        </tp:docstring>
      </arg>

    </method>

  </interface>
</node>
<node name="/Client_Approver" xml:base="../spec/Client_Approver.xml">
  <tp:copyright>Copyright © 2008-2009 Collabora Ltd.</tp:copyright>
  <tp:copyright>Copyright © 2008-2009 Nokia Corporation</tp:copyright>
  <tp:license xmlns="http://www.w3.org/1999/xhtml">
    <p>This library is free software; you can redistribute it and/or
      modify it under the terms of the GNU Lesser General Public
      License as published by the Free Software Foundation; either
      version 2.1 of the License, or (at your option) any later version.</p>

    <p>This library is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
      Lesser General Public License for more details.</p>

    <p>You should have received a copy of the GNU Lesser General Public
      License along with this library; if not, write to the Free Software
      Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
      02110-1301, USA.</p>
  </tp:license>

  <interface name="org.freedesktop.Telepathy.Client.Approver">
    <tp:added version="0.17.26">(as a stable interface)</tp:added>

    <tp:requires interface="org.freedesktop.Telepathy.Client"/>

    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      <p>Approvers are clients that notify the user that new channels have
        been created by a contact, and allow the user to accept or reject
        those channels. The new channels are represented by a <tp:dbus-ref namespace="org.freedesktop.Telepathy">ChannelDispatchOperation</tp:dbus-ref>
        object, which is passed to the
        <tp:member-ref>AddDispatchOperation</tp:member-ref> method.</p>

      <tp:rationale>
        <p>For instance, Empathy's tray icon, or the answer/reject window
          seen when a Maemo device receives a VoIP call, should be
          Approvers.</p>
      </tp:rationale>

      <p>Approvers can also select which channel handler will be used for the
        channel, for instance by offering the user a list of possible
        handlers rather than just an accept/reject choice.
        However, the Channel Dispatcher must be able to prioritize
        possible handlers on its own using some reasonable heuristic,
        probably based on user configuration.</p>

      <p>It is possible (and useful) to have an approver and
        a channel handler in the same process; this is particularly useful
        if a channel handler wants to claim responsibility for particular
        channels itself.</p>

      <p>All approvers are notified simultaneously. For instance, in a
        desktop system, there might be one approver that displays a
        notification-area icon, one that is part of a contact list
        window and highlights contacts there, and one that is part
        of a full-screen media player.</p>

      <p>Any approver can approve the handling of a channel dispatch operation
        with a particular channel handler by calling the <tp:dbus-ref namespace="org.freedesktop.Telepathy.ChannelDispatchOperation">HandleWith</tp:dbus-ref>
        method. Approvers can also attempt to <tp:dbus-ref namespace="org.freedesktop.Telepathy.ChannelDispatchOperation">Claim</tp:dbus-ref>
        channels; if this succeeds, the approver may handle the channels
        itself (if it is also a Handler), or close the channels in order to
        reject them.</p>

      <p>At the D-Bus level, there is no &quot;reject&quot; operation: approvers wishing
        to reject channels SHOULD call the Claim method, then (if it succeeds)
        close the channels in any way they see fit.</p>

      <p>The first approver to reply gets its decision acted on; any other
        approvers that reply at approximately the same time will get a D-Bus
        error, indicating that the channel has already been dealt with.</p>

      <p>Approvers should usually prompt the user and ask for
        confirmation, rather than dispatching the channel to a handler
        straight away.</p>
    </tp:docstring>

    <property access="read" name="ApproverChannelFilter" tp:name-for-bindings="Approver_Channel_Filter" tp:type="Channel_Class[]" type="aa{sv}">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>A specification of the channels in which this approver is
          interested. The <tp:member-ref>AddDispatchOperation</tp:member-ref>
          method should be called by the channel dispatcher whenever at least
          one of the channels in a channel dispatch operation matches this
          description.</p>

        <p>This property works in exactly the same way as the
          <tp:dbus-ref namespace="org.freedesktop.Telepathy">Client.Observer.ObserverChannelFilter</tp:dbus-ref>
          property. In particular, it cannot change while the approver process
          continues to own the corresponding Client bus name.</p>

        <p>In the .client file, it is represented in the
          same way as ObserverChannelFilter, but the group has the same
          name as this interface and the keys start with
          ApproverChannelFilter instead of ObserverChannelFilter.</p>
      </tp:docstring>
    </property>

    <method name="AddDispatchOperation" tp:name-for-bindings="Add_Dispatch_Operation">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Called by the channel dispatcher when a ChannelDispatchOperation
          in which the approver has registered an interest is created,
          or when the approver starts up while such channel dispatch
          operations already exist.</p>

        <p>The channel dispatcher SHOULD call this method on all approvers
          at the same time. If an approver returns an error from this method,
          the approver is assumed to be faulty.</p>

        <p>If no approvers return from this method
          successfully (including situations where there are no matching
          approvers at all), the channel dispatcher SHOULD consider this
          to be an error, and recover by dispatching the channel to the
          most preferred handler.</p>

        <tp:rationale>
          Processes that aren't approvers (or don't at least ensure that there
          is some approver) probably shouldn't be making connections
          anyway, so there should always be at least one approver running.
        </tp:rationale>
      </tp:docstring>

      <arg direction="in" name="Channels" tp:type="Channel_Details[]" type="a(oa{sv})">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The initial value of the <tp:dbus-ref namespace="org.freedesktop.Telepathy">ChannelDispatchOperation.Channels</tp:dbus-ref>
            property, containing the <tp:dbus-ref namespace="org.freedesktop.Telepathy">Channel</tp:dbus-ref>s
            to be dispatched and their properties.</p>

          <tp:rationale>
            <p>This can't be signalled to the approver through the Properties
              parameter of this method, because Channels is not an immutable
              property.</p>
          </tp:rationale>

          <p>This argument always contains all of the channels in the channel
            dispatch operation, even if not all of them actually match
            the <tp:member-ref>ApproverChannelFilter</tp:member-ref>.</p>

          <tp:rationale>
            <p>This seems the least bad way to handle such a situation;
              see the discussion on
              <a href="http://bugs.freedesktop.org/show_bug.cgi?id=21090">bug
                #21090</a>.</p>
          </tp:rationale>

          <p>The actual channels to be dispatched may reduce as channels are
            closed: this is signalled by <tp:dbus-ref namespace="org.freedesktop.Telepathy">ChannelDispatchOperation.ChannelLost</tp:dbus-ref>.
          </p>

          <p>Approvers SHOULD connect to ChannelLost and <tp:dbus-ref namespace="org.freedesktop.Telepathy">ChannelDispatchOperation.Finished</tp:dbus-ref>.
            (if desired) before returning from AddDispatchOperation, since
            those signals are guaranteed not to be emitted until after all
            AddDispatchOperation calls have returned (with success or failure)
            or timed out.</p>
        </tp:docstring>
      </arg>

      <arg direction="in" name="DispatchOperation" type="o">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The
          <tp:dbus-ref namespace="org.freedesktop.Telepathy">ChannelDispatchOperation</tp:dbus-ref>
            to be processed.</p>
        </tp:docstring>
      </arg>

      <arg direction="in" name="Properties" tp:type="Qualified_Property_Value_Map" type="a{sv}">
        <tp:docstring>
          <p>Properties of the channel dispatch operation. This MUST NOT
            include properties that could change, SHOULD include as many
            properties as possible given that constraint, and MUST include at
            least the <tp:dbus-ref namespace="org.freedesktop.Telepathy.ChannelDispatchOperation">Account</tp:dbus-ref>,
            <tp:dbus-ref namespace="org.freedesktop.Telepathy.ChannelDispatchOperation">Connection</tp:dbus-ref>
            and <tp:dbus-ref namespace="org.freedesktop.Telepathy.ChannelDispatchOperation">PossibleHandlers</tp:dbus-ref>
            properties.</p>
        </tp:docstring>
      </arg>
    </method>

  </interface>
</node>
<node name="/Client_Handler" xml:base="../spec/Client_Handler.xml">
  <tp:copyright>Copyright © 2008-2009 Collabora Ltd.</tp:copyright>
  <tp:copyright>Copyright © 2008-2009 Nokia Corporation</tp:copyright>
  <tp:license xmlns="http://www.w3.org/1999/xhtml">
    <p>This library is free software; you can redistribute it and/or
      modify it under the terms of the GNU Lesser General Public
      License as published by the Free Software Foundation; either
      version 2.1 of the License, or (at your option) any later version.</p>

    <p>This library is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
      Lesser General Public License for more details.</p>

    <p>You should have received a copy of the GNU Lesser General Public
      License along with this library; if not, write to the Free Software
      Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
      02110-1301, USA.</p>
  </tp:license>

  <interface name="org.freedesktop.Telepathy.Client.Handler">
    <tp:added version="0.17.26">(as a stable interface)</tp:added>

    <tp:requires interface="org.freedesktop.Telepathy.Client"/>

    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      <p>Handlers are the user interface for a channel. They turn an abstract
        Telepathy channel into something the user wants to see, like a text
        message stream or an audio and/or video call.</p>

      <p>For its entire lifetime, each channel on a connection known to the
        channel dispatcher is either being processed by the channel dispatcher,
        or being handled by precisely one Handler.</p>

      <p>Because each channel is only handled by one Handler, handlers may
        perform actions that only make sense to do once, such as acknowledging
        <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel.Type">Text</tp:dbus-ref>
        messages, doing the actual streaming for <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel.Type">StreamedMedia</tp:dbus-ref>
        channels with the <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel.Interface">MediaSignalling</tp:dbus-ref>
        interface, or transferring the file in <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel.Type">FileTransfer</tp:dbus-ref>
        channels.</p>

      <p>When a new incoming channel (one with
        <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel">Requested</tp:dbus-ref>
        = FALSE) is offered to
        <tp:dbus-ref namespace="org.freedesktop.Telepathy.Client">Approver</tp:dbus-ref>s
        by the channel dispatcher, it also offers the Approvers a list of all
        the running or activatable handlers whose
        <tp:member-ref>HandlerChannelFilter</tp:member-ref> property
        (possibly as cached in the .client file) indicates that they
        are able to handle the channel. The Approvers can choose one of
        those channel handlers to handle the channel.</p>

      <p>When a new outgoing channel (one with
        <tp:dbus-ref namespace="org.freedesktop.Telepathy.Channel">Requested</tp:dbus-ref>
        = TRUE) appears, the channel dispatcher passes it to an appropriate
        channel handler automatically.
      </p>

    </tp:docstring>

    <property access="read" name="HandlerChannelFilter" tp:name-for-bindings="Handler_Channel_Filter" tp:type="Channel_Class[]" type="aa{sv}">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>A specification of the channels that this channel handler can
          deal with. It will be offered to approvers as a potential
          channel handler for bundles that contain only suitable channels,
          or for suitable channels that must be handled separately.</p>

        <p>This property works in exactly the same way as the
          <tp:dbus-ref namespace="org.freedesktop.Telepathy">Client.Observer.ObserverChannelFilter</tp:dbus-ref>
          property. In particular, it cannot change while the handler process
          continues to own the corresponding Client bus name.</p>

        <p>In the .client file, it is represented in the
          same way as ObserverChannelFilter, but the group has the same
          name as this interface and the keys start with
          HandlerChannelFilter instead of ObserverChannelFilter.</p>
      </tp:docstring>
    </property>

    <property access="read" name="BypassApproval" tp:name-for-bindings="Bypass_Approval" type="b">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>If true, channels destined for this handler are automatically
          handled, without invoking approvers.</p>

        <tp:rationale>
          <p>The intended usage is to allow a client handling one channel to
            pick up closely related channels. Suppose a client capable of
            handling both Text and StreamedMedia,
            <code>org.freedesktop.Telepathy.Client.Empathy</code>, is
            handling a StreamedMedia channel. That client can take a second
            well-known bus name, say
            <code>org.freedesktop.Telepathy.Client.Empathy._1._42.Bundle1</code>,
            and configure an object at
            <code>/org/freedesktop/Telepathy/Client/Empathy/_1/_42/Bundle1</code>
            with BypassApproval = TRUE,
            whose <tp:member-ref>HandlerChannelFilter</tp:member-ref>
            matches closely related Text channels by their Bundle property.
            (This is use-case dis5)</p>
        </tp:rationale>
      </tp:docstring>
    </property>

    <method name="HandleChannels" tp:name-for-bindings="Handle_Channels">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Called by the channel dispatcher when this client should handle these
          channels, or when this client should present channels that it is already
          handling to the user (e.g. bring them into the foreground).</p>

        <tp:rationale>
          <p>Clients are expected to know what channels they're already handling,
            and which channel object path corresponds to which window or tab.
            This can easily be done using a hash table keyed by channels' object
            paths.</p>
        </tp:rationale>

        <p>This method can raise any D-Bus error. If it does, the
          handler is assumed to have failed or crashed, and the channel
          dispatcher MUST recover in an implementation-specific way; it MAY
          attempt to dispatch the channels to another handler, or close the
          channels.</p>

        <p>If closing the channels, it is RECOMMENDED that the channel
          dispatcher attempts to close the channels using
          <tp:dbus-ref namespace="org.freedesktop.Telepathy">Channel.Close</tp:dbus-ref>,
          but resorts to calling
          <tp:dbus-ref namespace="org.freedesktop.Telepathy">Channel.Interface.Destroyable.Destroy</tp:dbus-ref>
          (if available) or ignoring the channel (if not) if the same handler
          repeatedly fails to handle channels.</p>

        <p>After HandleChannels returns successfully, the client process is
          considered to be responsible for the channel until it its unique
          name disappears from the bus.</p>

        <tp:rationale>
          <p>If a process has multiple Client bus names - some temporary and
            some long-lived - and drops one of the temporary bus names in order
            to reduce the set of channels that it will handle, any channels
            that it is already handling should remain unaffected.</p>
        </tp:rationale>
      </tp:docstring>

      <arg direction="in" name="Account" type="o">
        <tp:docstring>
          The
          <tp:dbus-ref namespace="org.freedesktop.Telepathy">Account</tp:dbus-ref>
          with which the channels are associated. The
          well-known bus name to use is that of the
          <tp:dbus-ref namespace="org.freedesktop.Telepathy">AccountManager</tp:dbus-ref>.
        </tp:docstring>
      </arg>

      <arg direction="in" name="Connection" type="o">
        <tp:docstring>
          The Connection with which the channels are associated. The
          well-known bus name to use can be derived from this object
          path by removing the leading '/' and replacing all subsequent
          '/' by '.'.
        </tp:docstring>
      </arg>

      <arg direction="in" name="Channels" tp:type="Channel_Details[]" type="a(oa{sv})">
        <tp:docstring>
          The channels and their immutable properties. Their well-known
          bus name is the same as that of the Connection.
        </tp:docstring>
      </arg>

      <arg direction="in" name="Requests_Satisfied" type="ao">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The requests satisfied by these channels.</p>

          <tp:rationale>
            <p>If the handler implements Requests, this tells it
              that these channels match previous <tp:dbus-ref namespace="org.freedesktop.Telepathy.Client.Interface.Requests">AddRequest</tp:dbus-ref>
              calls that it may have received.</p>

            <p>There can be more than one, if they were EnsureChannel
              requests.</p>
          </tp:rationale>
        </tp:docstring>
      </arg>

      <arg direction="in" name="User_Action_Time" type="t">
        <tp:docstring>
          The time at which user action occurred, or 0 if this channel
          is to be handled for some reason not involving user action.
          Handlers SHOULD use this for focus-stealing prevention,
          if applicable.
        </tp:docstring>
      </arg>

      <arg direction="in" name="Handler_Info" type="a{sv}">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>Additional information about these channels. No keys are
            currently defined.</p>

          <p>If keys are defined for this dictionary, all will be optional;
            handlers MAY safely ignore any entry in this dictionary.</p>
        </tp:docstring>
      </arg>

      <!-- FIXME: invent a way to say "any error is possible" in spec markup -->
    </method>

    <property access="read" name="HandledChannels" tp:name-for-bindings="Handled_Channels" type="ao">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>A list of the channels that this process is currently handling.</p>

        <p>There is no change notification.</p>

        <tp:rationale>
          <p>This property exists for state recovery - it makes it possible
            for channel handling to survive a ChannelDispatcher crash.</p>

          <p>If the channel dispatcher is automatically replaced, the
            replacement can discover all Handlers by looking for the Client
            well-known bus names, and discover which channels they are
            currently handling. Once this has been done, all unhandled
            channels can be re-dispatched, and the only issue visible to
            the user is that unhandled channels that they have already
            approved might be sent back to Approvers.</p>
        </tp:rationale>

        <p>The value of this property SHOULD be the same for all Client
          instances that share a unique bus name, and SHOULD include all
          channels that are being handled, even if they were conceptually
          handled by a different Client instance.</p>

        <tp:rationale>
          <p>Otherwise, when a process released a temporary Client name,
            channels that it handled because of that Client name would no
            longer be state-recoverable.</p>
        </tp:rationale>
      </tp:docstring>
    </property>

  </interface>
</node>

<node name="/Client_Interface_Requests" xml:base="../spec/Client_Interface_Requests.xml">
  <tp:copyright>Copyright © 2008-2009 Collabora Ltd.</tp:copyright>
  <tp:copyright>Copyright © 2008-2009 Nokia Corporation</tp:copyright>
  <tp:license xmlns="http://www.w3.org/1999/xhtml">
    <p>This library is free software; you can redistribute it and/or
      modify it under the terms of the GNU Lesser General Public
      License as published by the Free Software Foundation; either
      version 2.1 of the License, or (at your option) any later version.</p>

    <p>This library is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
      Lesser General Public License for more details.</p>

    <p>You should have received a copy of the GNU Lesser General Public
      License along with this library; if not, write to the Free Software
      Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
      02110-1301, USA.</p>
  </tp:license>

  <interface name="org.freedesktop.Telepathy.Client.Interface.Requests">
    <tp:added version="0.17.26">(as a stable interface)</tp:added>

    <tp:requires interface="org.freedesktop.Telepathy.Client"/>
    <tp:requires interface="org.freedesktop.Telepathy.Client.Handler"/>

    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      <p>This interface can be implemented by a Handler to be notified about
        requests for channels that it is likely to be asked to handle.</p>
    </tp:docstring>

    <method name="AddRequest" tp:name-for-bindings="Add_Request">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Called by the ChannelDispatcher to indicate that channels have been
          requested, and that if the request is successful, they will probably
          be handled by this Handler. The ChannelDispatcher SHOULD only
          call this method on one handler per request.</p>

        <tp:rationale>
          <p>This allows the UI to start preparing to handle the channels
            in advance (e.g. render a window with an &quot;in progress&quot; message),
            improving perceived responsiveness.</p>

          <p>The use of &quot;probably&quot; is because you can't necessarily tell from
            a channel request which handler will handle particular channels.
            A reasonable heuristic would be to match the request against the
            <tp:dbus-ref namespace="org.freedesktop.Telepathy.Client.Handler">HandlerChannelFilter</tp:dbus-ref>,
            and respect the preferred handler (if any).</p>
        </tp:rationale>

        <p>If the request succeeds and is given to the expected Handler,
          the Requests_Satisfied parameter to
          <tp:dbus-ref namespace="org.freedesktop.Telepathy.Client.Handler">HandleChannels</tp:dbus-ref>
          can be used to match the channel to a previous AddRequest call.</p>

        <tp:rationale>
          <p>This lets the UI direct the channels to the window that it
            already opened.</p>
        </tp:rationale>

        <p>If the request fails, the expected handler is notified by the
          channel dispatcher calling its
          <tp:member-ref>RemoveRequest</tp:member-ref> method.</p>

        <tp:rationale>
          <p>This lets the UI close the window or display the error.</p>
        </tp:rationale>

        <p>The channel dispatcher SHOULD remember which handler was notified,
          and if the channel request succeeds, it SHOULD dispatch the channels
          to the expected handler, unless the channels do not match that
          handler's <tp:dbus-ref namespace="org.freedesktop.Telepathy.Client.Handler">HandlerChannelFilter</tp:dbus-ref>.
          If the channels are not dispatched to the expected handler, the
          handler that was expected is notified by the channel dispatcher
          calling its <tp:member-ref>RemoveRequest</tp:member-ref> method
          with the NotYours error.</p>

        <tp:rationale>
          <p>Expected handling is for the UI to close the window it
            previously opened.</p>
        </tp:rationale>

        <p>Handlers SHOULD NOT return an error from this method; errors
          returned from this method SHOULD NOT alter the channel dispatcher's
          behaviour.</p>

        <tp:rationale>
          <p>Calls to this method are merely a notification.</p>
        </tp:rationale>
      </tp:docstring>

      <arg direction="in" name="Request" type="o">
        <tp:docstring>
          The <tp:dbus-ref namespace="org.freedesktop.Telepathy">ChannelRequest</tp:dbus-ref>
          object, which MUST have been returned by <tp:dbus-ref namespace="org.freedesktop.Telepathy.ChannelDispatcher">CreateChannel</tp:dbus-ref>
          or <tp:dbus-ref namespace="org.freedesktop.Telepathy.ChannelDispatcher">EnsureChannel</tp:dbus-ref>
          before this method is called.

          <tp:rationale>
            See those methods for the rationale of this ordering.
          </tp:rationale>
        </tp:docstring>
      </arg>

      <arg direction="in" name="Properties" tp:type="Qualified_Property_Value_Map" type="a{sv}">
        <tp:docstring>
          <p>Some of the properties of the ChannelRequest. To avoid race
            conditions, this dictionary MUST NOT include properties whose
            values could subsequently change. It SHOULD include as many
            properties as possible, given that constraint.</p>

          <p>In particular, the properties <tp:dbus-ref namespace="org.freedesktop.Telepathy.ChannelRequest">Requests</tp:dbus-ref>
            and <tp:dbus-ref namespace="org.freedesktop.Telepathy.ChannelRequest">UserActionTime</tp:dbus-ref>
            MUST be included.</p>
        </tp:docstring>
      </arg>
    </method>

    <method name="RemoveRequest" tp:name-for-bindings="Remove_Request">
      <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
        <p>Called by the ChannelDispatcher to indicate that a request
          previously passed to <tp:member-ref>AddRequest</tp:member-ref>
          has failed and should be disregarded.</p>

        <p>Handlers SHOULD NOT return an error from this method; errors
          returned from this method SHOULD NOT alter the channel dispatcher's
          behaviour.</p>

        <tp:rationale>
          <p>Calls to this method are merely a notification.</p>
        </tp:rationale>
      </tp:docstring>

      <arg direction="in" name="Request" type="o">
        <tp:docstring>
          The request that failed.
        </tp:docstring>
      </arg>

      <arg direction="in" name="Error" tp:type="DBus_Error_Name" type="s">
        <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
          <p>The name of the D-Bus error with which the request failed.</p>

          <p>If this is <code>org.freedesktop.Telepathy.Error.NotYours</code>,
            this indicates that the request succeeded, but all the resulting
            channels were given to some other handler.</p>
        </tp:docstring>
      </arg>

      <arg direction="in" name="Message" type="s">
        <tp:docstring>
          Any message supplied with the D-Bus error.
        </tp:docstring>
      </arg>
    </method>

  </interface>
</node>

</tp:spec>
