<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="loudmouth-lm-ssl">
<refmeta>
<refentrytitle role="top_of_page" id="loudmouth-lm-ssl.top_of_page">LmSSL</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LOUDMOUTH Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>LmSSL</refname>
<refpurpose>SSL struct for SSL support in Loudmouth</refpurpose>
</refnamediv>

<refsynopsisdiv id="loudmouth-lm-ssl.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
                    <link linkend="LmSSL">LmSSL</link>;
enum                <link linkend="LmCertificateStatus">LmCertificateStatus</link>;
enum                <link linkend="LmSSLStatus">LmSSLStatus</link>;
enum                <link linkend="LmSSLResponse">LmSSLResponse</link>;
<link linkend="LmSSLResponse">LmSSLResponse</link>       (<link linkend="LmSSLFunction">*LmSSLFunction</link>)                    (<link linkend="LmSSL">LmSSL</link> *ssl,
                                                         <link linkend="LmSSLStatus">LmSSLStatus</link> status,
                                                         <link linkend="gpointer">gpointer</link> user_data);
<link linkend="LmSSL">LmSSL</link> *             <link linkend="lm-ssl-new">lm_ssl_new</link>                          (const <link linkend="gchar">gchar</link> *expected_fingerprint,
                                                         <link linkend="LmSSLFunction">LmSSLFunction</link> ssl_function,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> notify);
<link linkend="gboolean">gboolean</link>            <link linkend="lm-ssl-is-supported">lm_ssl_is_supported</link>                 (void);
const <link linkend="gchar">gchar</link> *       <link linkend="lm-ssl-get-fingerprint">lm_ssl_get_fingerprint</link>              (<link linkend="LmSSL">LmSSL</link> *ssl);
<link linkend="void">void</link>                <link linkend="lm-ssl-use-starttls">lm_ssl_use_starttls</link>                 (<link linkend="LmSSL">LmSSL</link> *ssl,
                                                         <link linkend="gboolean">gboolean</link> use_starttls,
                                                         <link linkend="gboolean">gboolean</link> require_starttls);
<link linkend="gboolean">gboolean</link>            <link linkend="lm-ssl-get-use-starttls">lm_ssl_get_use_starttls</link>             (<link linkend="LmSSL">LmSSL</link> *ssl);
<link linkend="gboolean">gboolean</link>            <link linkend="lm-ssl-get-require-starttls">lm_ssl_get_require_starttls</link>         (<link linkend="LmSSL">LmSSL</link> *ssl);
<link linkend="LmSSL">LmSSL</link> *             <link linkend="lm-ssl-ref">lm_ssl_ref</link>                          (<link linkend="LmSSL">LmSSL</link> *ssl);
<link linkend="void">void</link>                <link linkend="lm-ssl-unref">lm_ssl_unref</link>                        (<link linkend="LmSSL">LmSSL</link> *ssl);
</synopsis>
</refsynopsisdiv>









<refsect1 id="loudmouth-lm-ssl.description" role="desc">
<title role="desc.title">Description</title>
<para>
Use this together with an <link linkend="LmConnection"><type>LmConnection</type></link> to get the connection to use SSL. Example of how to use the <link linkend="LmSSL"><type>LmSSL</type></link> API.
</para>
<informalexample><programlisting><![CDATA[
LmConnection *connection;
LmSSL        *ssl;
connection = lm_connection_new ("myserver");
ssl = lm_ssl_new (NULL, my_ssl_func, NULL, NULL);
lm_connection_set_ssl (connection, ssl);
...
]]></programlisting></informalexample>
</refsect1>

<refsect1 id="loudmouth-lm-ssl.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="LmSSL" role="struct">
<title>LmSSL</title>
<indexterm zone="LmSSL"><primary sortas="LmSSL">LmSSL</primary></indexterm><programlisting>typedef struct _LmSSL LmSSL;</programlisting>
<para>
This should not be accessed directly. Use the accessor functions as described below.
</para></refsect2>
<refsect2 id="LmCertificateStatus" role="enum">
<title>enum LmCertificateStatus</title>
<indexterm zone="LmCertificateStatus"><primary sortas="LmCertificateStatus">LmCertificateStatus</primary></indexterm><programlisting>typedef enum {
	LM_CERT_INVALID,
	LM_CERT_ISSUER_NOT_FOUND,
	LM_CERT_REVOKED
} LmCertificateStatus;
</programlisting>
<para>
Provides information of the status of a certain certificate.
</para><variablelist role="enum">
<varlistentry id="LM-CERT-INVALID--CAPS" role="constant">
<term><literal>LM_CERT_INVALID</literal></term>
<listitem><simpara>The certificate is invalid.
</simpara></listitem>
</varlistentry>
<varlistentry id="LM-CERT-ISSUER-NOT-FOUND--CAPS" role="constant">
<term><literal>LM_CERT_ISSUER_NOT_FOUND</literal></term>
<listitem><simpara>The issuer of the certificate is not found.
</simpara></listitem>
</varlistentry>
<varlistentry id="LM-CERT-REVOKED--CAPS" role="constant">
<term><literal>LM_CERT_REVOKED</literal></term>
<listitem><simpara>The certificate has been revoked.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="LmSSLStatus" role="enum">
<title>enum LmSSLStatus</title>
<indexterm zone="LmSSLStatus"><primary sortas="LmSSLStatus">LmSSLStatus</primary></indexterm><programlisting>typedef enum {
	LM_SSL_STATUS_NO_CERT_FOUND,	
	LM_SSL_STATUS_UNTRUSTED_CERT,
	LM_SSL_STATUS_CERT_EXPIRED,
	LM_SSL_STATUS_CERT_NOT_ACTIVATED,
	LM_SSL_STATUS_CERT_HOSTNAME_MISMATCH,			
	LM_SSL_STATUS_CERT_FINGERPRINT_MISMATCH,			
	LM_SSL_STATUS_GENERIC_ERROR
} LmSSLStatus;
</programlisting>
<para>
Provides information about something gone wrong when trying to setup the SSL connection.
</para><variablelist role="enum">
<varlistentry id="LM-SSL-STATUS-NO-CERT-FOUND--CAPS" role="constant">
<term><literal>LM_SSL_STATUS_NO_CERT_FOUND</literal></term>
<listitem><simpara>The server doesn't provide a certificate.
</simpara></listitem>
</varlistentry>
<varlistentry id="LM-SSL-STATUS-UNTRUSTED-CERT--CAPS" role="constant">
<term><literal>LM_SSL_STATUS_UNTRUSTED_CERT</literal></term>
<listitem><simpara>The certification can not be trusted.
</simpara></listitem>
</varlistentry>
<varlistentry id="LM-SSL-STATUS-CERT-EXPIRED--CAPS" role="constant">
<term><literal>LM_SSL_STATUS_CERT_EXPIRED</literal></term>
<listitem><simpara>The certificate has expired.
</simpara></listitem>
</varlistentry>
<varlistentry id="LM-SSL-STATUS-CERT-NOT-ACTIVATED--CAPS" role="constant">
<term><literal>LM_SSL_STATUS_CERT_NOT_ACTIVATED</literal></term>
<listitem><simpara>The certificate has not been activated.
</simpara></listitem>
</varlistentry>
<varlistentry id="LM-SSL-STATUS-CERT-HOSTNAME-MISMATCH--CAPS" role="constant">
<term><literal>LM_SSL_STATUS_CERT_HOSTNAME_MISMATCH</literal></term>
<listitem><simpara>The server hostname doesn't match the one in the certificate.
</simpara></listitem>
</varlistentry>
<varlistentry id="LM-SSL-STATUS-CERT-FINGERPRINT-MISMATCH--CAPS" role="constant">
<term><literal>LM_SSL_STATUS_CERT_FINGERPRINT_MISMATCH</literal></term>
<listitem><simpara>The fingerprint doesn't match your expected.
</simpara></listitem>
</varlistentry>
<varlistentry id="LM-SSL-STATUS-GENERIC-ERROR--CAPS" role="constant">
<term><literal>LM_SSL_STATUS_GENERIC_ERROR</literal></term>
<listitem><simpara>Some other error.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="LmSSLResponse" role="enum">
<title>enum LmSSLResponse</title>
<indexterm zone="LmSSLResponse"><primary sortas="LmSSLResponse">LmSSLResponse</primary></indexterm><programlisting>typedef enum {
	LM_SSL_RESPONSE_CONTINUE,
	LM_SSL_RESPONSE_STOP
} LmSSLResponse;
</programlisting>
<para>
Used to inform <link linkend="LmConnection"><type>LmConnection</type></link> if you want to stop due to an error reported or if you want to continue to connect.
</para><variablelist role="enum">
<varlistentry id="LM-SSL-RESPONSE-CONTINUE--CAPS" role="constant">
<term><literal>LM_SSL_RESPONSE_CONTINUE</literal></term>
<listitem><simpara>Continue to connect.
</simpara></listitem>
</varlistentry>
<varlistentry id="LM-SSL-RESPONSE-STOP--CAPS" role="constant">
<term><literal>LM_SSL_RESPONSE_STOP</literal></term>
<listitem><simpara>Stop the connection.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="LmSSLFunction" role="function">
<title>LmSSLFunction ()</title>
<indexterm zone="LmSSLFunction"><primary sortas="LmSSLFunction">LmSSLFunction</primary></indexterm><programlisting><link linkend="LmSSLResponse">LmSSLResponse</link>       (*LmSSLFunction)                    (<link linkend="LmSSL">LmSSL</link> *ssl,
                                                         <link linkend="LmSSLStatus">LmSSLStatus</link> status,
                                                         <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
This function is called if something goes wrong during the connecting phase.
</para><variablelist role="params">
<varlistentry><term><parameter>ssl</parameter>&#160;:</term>
<listitem><simpara>An <link linkend="LmSSL"><type>LmSSL</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>status</parameter>&#160;:</term>
<listitem><simpara>The status informing what went wrong.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>User data provided in the callback.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>User should return <link linkend="LM-SSL-RESPONSE-CONTINUE--CAPS"><type>LM_SSL_RESPONSE_CONTINUE</type></link> if connection should proceed and otherwise <link linkend="LM-SSL-RESPONSE-STOP--CAPS"><type>LM_SSL_RESPONSE_STOP</type></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lm-ssl-new" role="function">
<title>lm_ssl_new ()</title>
<indexterm zone="lm-ssl-new"><primary sortas="lm_ssl_new">lm_ssl_new</primary></indexterm><programlisting><link linkend="LmSSL">LmSSL</link> *             lm_ssl_new                          (const <link linkend="gchar">gchar</link> *expected_fingerprint,
                                                         <link linkend="LmSSLFunction">LmSSLFunction</link> ssl_function,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> notify);</programlisting>
<para>
Creates a new SSL struct, call <link linkend="lm-connection-set-ssl"><type>lm_connection_set_ssl</type></link> to use it.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>expected_fingerprint</parameter>&#160;:</term>
<listitem><simpara> The expected fingerprint. <parameter>ssl_function</parameter> will be called if there is a mismatch. <link linkend="NULL--CAPS"><literal>NULL</literal></link> if you are not interested in this check.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ssl_function</parameter>&#160;:</term>
<listitem><simpara> Callback called to inform the user of a problem during setting up the SSL connection and how to proceed. If <link linkend="NULL--CAPS"><literal>NULL</literal></link> is passed the default function that always continues will be used.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> Data sent with the callback.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>notify</parameter>&#160;:</term>
<listitem><simpara> Function to free <parameter>user_dataa</parameter> when the connection is finished. <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>user_data</parameter> should not be freed.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A new <link linkend="LmSSL"><type>LmSSL</type></link> struct.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lm-ssl-is-supported" role="function">
<title>lm_ssl_is_supported ()</title>
<indexterm zone="lm-ssl-is-supported"><primary sortas="lm_ssl_is_supported">lm_ssl_is_supported</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            lm_ssl_is_supported                 (void);</programlisting>
<para>
Checks whether Loudmouth supports SSL or not.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><type>TRUE</type></link> if this installation of Loudmouth supports SSL, otherwise returns <link linkend="FALSE--CAPS"><type>FALSE</type></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lm-ssl-get-fingerprint" role="function">
<title>lm_ssl_get_fingerprint ()</title>
<indexterm zone="lm-ssl-get-fingerprint"><primary sortas="lm_ssl_get_fingerprint">lm_ssl_get_fingerprint</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link> *       lm_ssl_get_fingerprint              (<link linkend="LmSSL">LmSSL</link> *ssl);</programlisting>
<para>
Returns the MD5 fingerprint of the remote server's certificate.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ssl</parameter>&#160;:</term>
<listitem><simpara> an <link linkend="LmSSL"><type>LmSSL</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A 16-byte array representing the fingerprint or <link linkend="NULL--CAPS"><literal>NULL</literal></link> if unknown.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lm-ssl-use-starttls" role="function">
<title>lm_ssl_use_starttls ()</title>
<indexterm zone="lm-ssl-use-starttls"><primary sortas="lm_ssl_use_starttls">lm_ssl_use_starttls</primary></indexterm><programlisting><link linkend="void">void</link>                lm_ssl_use_starttls                 (<link linkend="LmSSL">LmSSL</link> *ssl,
                                                         <link linkend="gboolean">gboolean</link> use_starttls,
                                                         <link linkend="gboolean">gboolean</link> require_starttls);</programlisting>
<para>
Set whether STARTTLS should be used.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ssl</parameter>&#160;:</term>
<listitem><simpara> an <link linkend="LmSSL"><type>LmSSL</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>use_starttls</parameter>&#160;:</term>
<listitem><simpara> <link linkend="TRUE--CAPS"><type>TRUE</type></link> if STARTTLS should be used.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>require_starttls</parameter>&#160;:</term>
<listitem><simpara> <link linkend="TRUE--CAPS"><type>TRUE</type></link> if STARTTLS should be required.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lm-ssl-get-use-starttls" role="function">
<title>lm_ssl_get_use_starttls ()</title>
<indexterm zone="lm-ssl-get-use-starttls"><primary sortas="lm_ssl_get_use_starttls">lm_ssl_get_use_starttls</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            lm_ssl_get_use_starttls             (<link linkend="LmSSL">LmSSL</link> *ssl);</programlisting>
<para>
Fetches whether STARTTLS is used.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ssl</parameter>&#160;:</term>
<listitem><simpara> an <link linkend="LmSSL"><type>LmSSL</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><type>TRUE</type></link> is <parameter>ssl</parameter> is configured to use STARTTLS.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lm-ssl-get-require-starttls" role="function">
<title>lm_ssl_get_require_starttls ()</title>
<indexterm zone="lm-ssl-get-require-starttls"><primary sortas="lm_ssl_get_require_starttls">lm_ssl_get_require_starttls</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            lm_ssl_get_require_starttls         (<link linkend="LmSSL">LmSSL</link> *ssl);</programlisting>
<para>
Fetches whether STARTTLS is required.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ssl</parameter>&#160;:</term>
<listitem><simpara> an <link linkend="LmSSL"><type>LmSSL</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><type>TRUE</type></link> if <parameter>ssl</parameter> requires that STARTTLS succeed.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lm-ssl-ref" role="function">
<title>lm_ssl_ref ()</title>
<indexterm zone="lm-ssl-ref"><primary sortas="lm_ssl_ref">lm_ssl_ref</primary></indexterm><programlisting><link linkend="LmSSL">LmSSL</link> *             lm_ssl_ref                          (<link linkend="LmSSL">LmSSL</link> *ssl);</programlisting>
<para>
Adds a reference to <parameter>ssl</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ssl</parameter>&#160;:</term>
<listitem><simpara> an <link linkend="LmSSL"><type>LmSSL</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the ssl
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lm-ssl-unref" role="function">
<title>lm_ssl_unref ()</title>
<indexterm zone="lm-ssl-unref"><primary sortas="lm_ssl_unref">lm_ssl_unref</primary></indexterm><programlisting><link linkend="void">void</link>                lm_ssl_unref                        (<link linkend="LmSSL">LmSSL</link> *ssl);</programlisting>
<para>
Removes a reference from <parameter>ssl</parameter>. When no more references are present
<parameter>ssl</parameter> is freed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ssl</parameter>&#160;:</term>
<listitem><simpara> an <link linkend="LmSSL"><type>LmSSL</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
