<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="loudmouth-lm-message-node">
<refmeta>
<refentrytitle role="top_of_page" id="loudmouth-lm-message-node.top_of_page">LmMessageNode</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LOUDMOUTH Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>LmMessageNode</refname>
<refpurpose>A node in the message tree</refpurpose>
</refnamediv>

<refsynopsisdiv id="loudmouth-lm-message-node.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
                    <link linkend="LmMessageNode">LmMessageNode</link>;
const <link linkend="gchar">gchar</link> *       <link linkend="lm-message-node-get-value">lm_message_node_get_value</link>           (<link linkend="LmMessageNode">LmMessageNode</link> *node);
<link linkend="void">void</link>                <link linkend="lm-message-node-set-value">lm_message_node_set_value</link>           (<link linkend="LmMessageNode">LmMessageNode</link> *node,
                                                         const <link linkend="gchar">gchar</link> *value);
<link linkend="LmMessageNode">LmMessageNode</link> *     <link linkend="lm-message-node-add-child">lm_message_node_add_child</link>           (<link linkend="LmMessageNode">LmMessageNode</link> *node,
                                                         const <link linkend="gchar">gchar</link> *name,
                                                         const <link linkend="gchar">gchar</link> *value);
<link linkend="void">void</link>                <link linkend="lm-message-node-set-attributes">lm_message_node_set_attributes</link>      (<link linkend="LmMessageNode">LmMessageNode</link> *node,
                                                         const <link linkend="gchar">gchar</link> *name,
                                                         ...);
const <link linkend="gchar">gchar</link> *       <link linkend="lm-message-node-get-attribute">lm_message_node_get_attribute</link>       (<link linkend="LmMessageNode">LmMessageNode</link> *node,
                                                         const <link linkend="gchar">gchar</link> *name);
<link linkend="void">void</link>                <link linkend="lm-message-node-set-attribute">lm_message_node_set_attribute</link>       (<link linkend="LmMessageNode">LmMessageNode</link> *node,
                                                         const <link linkend="gchar">gchar</link> *name,
                                                         const <link linkend="gchar">gchar</link> *value);
<link linkend="LmMessageNode">LmMessageNode</link> *     <link linkend="lm-message-node-get-child">lm_message_node_get_child</link>           (<link linkend="LmMessageNode">LmMessageNode</link> *node,
                                                         const <link linkend="gchar">gchar</link> *child_name);
<link linkend="LmMessageNode">LmMessageNode</link> *     <link linkend="lm-message-node-find-child">lm_message_node_find_child</link>          (<link linkend="LmMessageNode">LmMessageNode</link> *node,
                                                         const <link linkend="gchar">gchar</link> *child_name);
<link linkend="gboolean">gboolean</link>            <link linkend="lm-message-node-get-raw-mode">lm_message_node_get_raw_mode</link>        (<link linkend="LmMessageNode">LmMessageNode</link> *node);
<link linkend="void">void</link>                <link linkend="lm-message-node-set-raw-mode">lm_message_node_set_raw_mode</link>        (<link linkend="LmMessageNode">LmMessageNode</link> *node,
                                                         <link linkend="gboolean">gboolean</link> raw_mode);
<link linkend="LmMessageNode">LmMessageNode</link> *     <link linkend="lm-message-node-ref">lm_message_node_ref</link>                 (<link linkend="LmMessageNode">LmMessageNode</link> *node);
<link linkend="void">void</link>                <link linkend="lm-message-node-unref">lm_message_node_unref</link>               (<link linkend="LmMessageNode">LmMessageNode</link> *node);
<link linkend="gchar">gchar</link> *             <link linkend="lm-message-node-to-string">lm_message_node_to_string</link>           (<link linkend="LmMessageNode">LmMessageNode</link> *node);
</synopsis>
</refsynopsisdiv>









<refsect1 id="loudmouth-lm-message-node.description" role="desc">
<title role="desc.title">Description</title>
<para>
Represents a node in the <link linkend="LmMessage"><type>LmMessage</type></link> tree. These map to XML nodes in the XMPP protocol.
</para>
</refsect1>

<refsect1 id="loudmouth-lm-message-node.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="LmMessageNode" role="struct">
<title>LmMessageNode</title>
<indexterm zone="LmMessageNode"><primary sortas="LmMessageNode">LmMessageNode</primary></indexterm><programlisting>typedef struct {
	gchar      *name;
	gchar      *value;
	gboolean    raw_mode;

        LmMessageNode     *next;
        LmMessageNode     *prev;
	LmMessageNode     *parent;
        LmMessageNode     *children;
} LmMessageNode;
</programlisting>
<para>
A struct representing a node in a message.
</para><variablelist role="struct">
<varlistentry>
<term><link linkend="gchar">gchar</link>&#160;*<structfield>name</structfield>;</term>
<listitem><simpara>the name of the node
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gchar">gchar</link>&#160;*<structfield>value</structfield>;</term>
<listitem><simpara>value of the node, can be NULL
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gboolean">gboolean</link>&#160;<structfield>raw_mode</structfield>;</term>
<listitem><simpara>if true, don't escape the content of the message. The content must be valid XML.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="LmMessageNode">LmMessageNode</link>&#160;*<structfield>next</structfield>;</term>
<listitem><simpara>next sibling
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="LmMessageNode">LmMessageNode</link>&#160;*<structfield>prev</structfield>;</term>
<listitem><simpara>previous sibling
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="LmMessageNode">LmMessageNode</link>&#160;*<structfield>parent</structfield>;</term>
<listitem><simpara>node parent
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="LmMessageNode">LmMessageNode</link>&#160;*<structfield>children</structfield>;</term>
<listitem><simpara>pointing to first child
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="lm-message-node-get-value" role="function">
<title>lm_message_node_get_value ()</title>
<indexterm zone="lm-message-node-get-value"><primary sortas="lm_message_node_get_value">lm_message_node_get_value</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link> *       lm_message_node_get_value           (<link linkend="LmMessageNode">LmMessageNode</link> *node);</programlisting>
<para>
Retrieves the value of <parameter>node</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>node</parameter>&#160;:</term>
<listitem><simpara> an <link linkend="LmMessageNode"><type>LmMessageNode</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The value of the node or <link linkend="NULL--CAPS"><literal>NULL</literal></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lm-message-node-set-value" role="function">
<title>lm_message_node_set_value ()</title>
<indexterm zone="lm-message-node-set-value"><primary sortas="lm_message_node_set_value">lm_message_node_set_value</primary></indexterm><programlisting><link linkend="void">void</link>                lm_message_node_set_value           (<link linkend="LmMessageNode">LmMessageNode</link> *node,
                                                         const <link linkend="gchar">gchar</link> *value);</programlisting>
<para>
Sets the value of <parameter>node</parameter>. If a previous value is set it will be freed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>node</parameter>&#160;:</term>
<listitem><simpara> an <link linkend="LmMessageNode"><type>LmMessageNode</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara> the new value.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lm-message-node-add-child" role="function">
<title>lm_message_node_add_child ()</title>
<indexterm zone="lm-message-node-add-child"><primary sortas="lm_message_node_add_child">lm_message_node_add_child</primary></indexterm><programlisting><link linkend="LmMessageNode">LmMessageNode</link> *     lm_message_node_add_child           (<link linkend="LmMessageNode">LmMessageNode</link> *node,
                                                         const <link linkend="gchar">gchar</link> *name,
                                                         const <link linkend="gchar">gchar</link> *value);</programlisting>
<para>
Add a child node with <parameter>name</parameter> and value set to <parameter>value</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>node</parameter>&#160;:</term>
<listitem><simpara> an <link linkend="LmMessageNode"><type>LmMessageNode</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> the name of the new child
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara> value of the new child
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the newly created child
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lm-message-node-set-attributes" role="function">
<title>lm_message_node_set_attributes ()</title>
<indexterm zone="lm-message-node-set-attributes"><primary sortas="lm_message_node_set_attributes">lm_message_node_set_attributes</primary></indexterm><programlisting><link linkend="void">void</link>                lm_message_node_set_attributes      (<link linkend="LmMessageNode">LmMessageNode</link> *node,
                                                         const <link linkend="gchar">gchar</link> *name,
                                                         ...);</programlisting>
<para>
Sets a list of attributes. The arguments should be names and corresponding 
value and needs to be ended with <link linkend="NULL--CAPS"><literal>NULL</literal></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>node</parameter>&#160;:</term>
<listitem><simpara> an <link linkend="LmMessageNode"><type>LmMessageNode</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> the first attribute, should be followed by a string with the value
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter>&#160;:</term>
<listitem><simpara> The rest of the name/value pairs
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lm-message-node-get-attribute" role="function">
<title>lm_message_node_get_attribute ()</title>
<indexterm zone="lm-message-node-get-attribute"><primary sortas="lm_message_node_get_attribute">lm_message_node_get_attribute</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link> *       lm_message_node_get_attribute       (<link linkend="LmMessageNode">LmMessageNode</link> *node,
                                                         const <link linkend="gchar">gchar</link> *name);</programlisting>
<para>
Fetches the attribute <parameter>name</parameter> from <parameter>node</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>node</parameter>&#160;:</term>
<listitem><simpara> an <link linkend="LmMessageNode"><type>LmMessageNode</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> the attribute name
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the attribute value or <link linkend="NULL--CAPS"><literal>NULL</literal></link> if not set
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lm-message-node-set-attribute" role="function">
<title>lm_message_node_set_attribute ()</title>
<indexterm zone="lm-message-node-set-attribute"><primary sortas="lm_message_node_set_attribute">lm_message_node_set_attribute</primary></indexterm><programlisting><link linkend="void">void</link>                lm_message_node_set_attribute       (<link linkend="LmMessageNode">LmMessageNode</link> *node,
                                                         const <link linkend="gchar">gchar</link> *name,
                                                         const <link linkend="gchar">gchar</link> *value);</programlisting>
<para>
Sets the attribute <parameter>name</parameter> to <parameter>value</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>node</parameter>&#160;:</term>
<listitem><simpara> an <link linkend="LmMessageNode"><type>LmMessageNode</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> name of attribute
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara> value of attribute.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lm-message-node-get-child" role="function">
<title>lm_message_node_get_child ()</title>
<indexterm zone="lm-message-node-get-child"><primary sortas="lm_message_node_get_child">lm_message_node_get_child</primary></indexterm><programlisting><link linkend="LmMessageNode">LmMessageNode</link> *     lm_message_node_get_child           (<link linkend="LmMessageNode">LmMessageNode</link> *node,
                                                         const <link linkend="gchar">gchar</link> *child_name);</programlisting>
<para>
Fetches the child <parameter>child_name</parameter> from <parameter>node</parameter>. If child is not found as an 
immediate child of <parameter>node</parameter> <link linkend="NULL--CAPS"><literal>NULL</literal></link> is returned.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>node</parameter>&#160;:</term>
<listitem><simpara> an <link linkend="LmMessageNode"><type>LmMessageNode</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>child_name</parameter>&#160;:</term>
<listitem><simpara> the childs name
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the child node or <link linkend="NULL--CAPS"><literal>NULL</literal></link> if not found
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lm-message-node-find-child" role="function">
<title>lm_message_node_find_child ()</title>
<indexterm zone="lm-message-node-find-child"><primary sortas="lm_message_node_find_child">lm_message_node_find_child</primary></indexterm><programlisting><link linkend="LmMessageNode">LmMessageNode</link> *     lm_message_node_find_child          (<link linkend="LmMessageNode">LmMessageNode</link> *node,
                                                         const <link linkend="gchar">gchar</link> *child_name);</programlisting>
<para>
Locates a child among all children of <parameter>node</parameter>. The entire tree will be search 
until a child with name <parameter>child_name</parameter> is located.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>node</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="LmMessageNode"><type>LmMessageNode</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>child_name</parameter>&#160;:</term>
<listitem><simpara> The name of the child to find
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the located child or <link linkend="NULL--CAPS"><literal>NULL</literal></link> if not found
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lm-message-node-get-raw-mode" role="function">
<title>lm_message_node_get_raw_mode ()</title>
<indexterm zone="lm-message-node-get-raw-mode"><primary sortas="lm_message_node_get_raw_mode">lm_message_node_get_raw_mode</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            lm_message_node_get_raw_mode        (<link linkend="LmMessageNode">LmMessageNode</link> *node);</programlisting>
<para>
Checks if the nodes value should be sent as raw mode.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>node</parameter>&#160;:</term>
<listitem><simpara> an <link linkend="LmMessageNode"><type>LmMessageNode</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if nodes value should be sent as is and <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> if the value will be escaped before sending.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lm-message-node-set-raw-mode" role="function">
<title>lm_message_node_set_raw_mode ()</title>
<indexterm zone="lm-message-node-set-raw-mode"><primary sortas="lm_message_node_set_raw_mode">lm_message_node_set_raw_mode</primary></indexterm><programlisting><link linkend="void">void</link>                lm_message_node_set_raw_mode        (<link linkend="LmMessageNode">LmMessageNode</link> *node,
                                                         <link linkend="gboolean">gboolean</link> raw_mode);</programlisting>
<para>
Set <parameter>raw_mode</parameter> to <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if you don't want to escape the value. You need to make sure the value is valid XML yourself.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>node</parameter>&#160;:</term>
<listitem><simpara> an <link linkend="LmMessageNode"><type>LmMessageNode</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>raw_mode</parameter>&#160;:</term>
<listitem><simpara> boolean specifying if node value should be escaped or not.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lm-message-node-ref" role="function">
<title>lm_message_node_ref ()</title>
<indexterm zone="lm-message-node-ref"><primary sortas="lm_message_node_ref">lm_message_node_ref</primary></indexterm><programlisting><link linkend="LmMessageNode">LmMessageNode</link> *     lm_message_node_ref                 (<link linkend="LmMessageNode">LmMessageNode</link> *node);</programlisting>
<para>
Adds a reference to <parameter>node</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>node</parameter>&#160;:</term>
<listitem><simpara> an <link linkend="LmMessageNode"><type>LmMessageNode</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the node
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lm-message-node-unref" role="function">
<title>lm_message_node_unref ()</title>
<indexterm zone="lm-message-node-unref"><primary sortas="lm_message_node_unref">lm_message_node_unref</primary></indexterm><programlisting><link linkend="void">void</link>                lm_message_node_unref               (<link linkend="LmMessageNode">LmMessageNode</link> *node);</programlisting>
<para>
Removes a reference from <parameter>node</parameter>. When no more references are present the
node is freed. When freed <link linkend="lm-message-node-unref"><function>lm_message_node_unref()</function></link> will be called on all
children. If caller needs to keep references to the children a call to 
<link linkend="lm-message-node-ref"><function>lm_message_node_ref()</function></link> needs to be done before the call to 
<link linkend="lm-message-unref"><function>lm_message_unref()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>node</parameter>&#160;:</term>
<listitem><simpara> an <link linkend="LmMessageNode"><type>LmMessageNode</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lm-message-node-to-string" role="function">
<title>lm_message_node_to_string ()</title>
<indexterm zone="lm-message-node-to-string"><primary sortas="lm_message_node_to_string">lm_message_node_to_string</primary></indexterm><programlisting><link linkend="gchar">gchar</link> *             lm_message_node_to_string           (<link linkend="LmMessageNode">LmMessageNode</link> *node);</programlisting>
<para>
Returns an XML string representing the node. This is what is sent over the
wire. This is used internally Loudmouth and is external for debugging 
purposes.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>node</parameter>&#160;:</term>
<listitem><simpara> an <link linkend="LmMessageNode"><type>LmMessageNode</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> an XML string representation of <parameter>node</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
