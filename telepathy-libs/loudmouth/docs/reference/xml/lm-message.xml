<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="loudmouth-lm-message">
<refmeta>
<refentrytitle role="top_of_page" id="loudmouth-lm-message.top_of_page">LmMessage</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LOUDMOUTH Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>LmMessage</refname>
<refpurpose>A message is built up like a tree of message nodes.</refpurpose>
</refnamediv>

<refsynopsisdiv id="loudmouth-lm-message.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
                    <link linkend="LmMessage">LmMessage</link>;
enum                <link linkend="LmMessageType">LmMessageType</link>;
enum                <link linkend="LmMessageSubType">LmMessageSubType</link>;
<link linkend="LmMessage">LmMessage</link> *         <link linkend="lm-message-new">lm_message_new</link>                      (const <link linkend="gchar">gchar</link> *to,
                                                         <link linkend="LmMessageType">LmMessageType</link> type);
<link linkend="LmMessage">LmMessage</link> *         <link linkend="lm-message-new-with-sub-type">lm_message_new_with_sub_type</link>        (const <link linkend="gchar">gchar</link> *to,
                                                         <link linkend="LmMessageType">LmMessageType</link> type,
                                                         <link linkend="LmMessageSubType">LmMessageSubType</link> sub_type);
<link linkend="LmMessageType">LmMessageType</link>       <link linkend="lm-message-get-type">lm_message_get_type</link>                 (<link linkend="LmMessage">LmMessage</link> *message);
<link linkend="LmMessageSubType">LmMessageSubType</link>    <link linkend="lm-message-get-sub-type">lm_message_get_sub_type</link>             (<link linkend="LmMessage">LmMessage</link> *message);
<link linkend="LmMessageNode">LmMessageNode</link> *     <link linkend="lm-message-get-node">lm_message_get_node</link>                 (<link linkend="LmMessage">LmMessage</link> *message);
<link linkend="LmMessage">LmMessage</link> *         <link linkend="lm-message-ref">lm_message_ref</link>                      (<link linkend="LmMessage">LmMessage</link> *message);
<link linkend="void">void</link>                <link linkend="lm-message-unref">lm_message_unref</link>                    (<link linkend="LmMessage">LmMessage</link> *message);
</synopsis>
</refsynopsisdiv>









<refsect1 id="loudmouth-lm-message.description" role="desc">
<title role="desc.title">Description</title>
<para>
Represents a message that can be sent with <link linkend="lm-connection-send"><function>lm_connection_send()</function></link>, <link linkend="lm-connection-send-with-reply"><function>lm_connection_send_with_reply()</function></link> or <link linkend="lm-connection-send-with-reply-and-block"><function>lm_connection_send_with_reply_and_block()</function></link>. Either use <link linkend="lm-message-new"><function>lm_message_new()</function></link> or <link linkend="lm-message-new-with-subtype"><function>lm_message_new_with_subtype()</function></link> to create a message. You need to call <link linkend="lm-message-unref"><function>lm_message_unref()</function></link> when are finished with it.
</para>
</refsect1>

<refsect1 id="loudmouth-lm-message.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="LmMessage" role="struct">
<title>LmMessage</title>
<indexterm zone="LmMessage"><primary sortas="LmMessage">LmMessage</primary></indexterm><programlisting>typedef struct {
	LmMessageNode *node;

	LmMessagePriv *priv;
} LmMessage;
</programlisting>
<para>
The LmMessage struct
</para><variablelist role="struct">
<varlistentry>
<term><link linkend="LmMessageNode">LmMessageNode</link>&#160;*<structfield>node</structfield>;</term>
<listitem><simpara>The root node of the message, you can also use <link linkend="lm-message-get-node"><function>lm_message_get_node()</function></link> to retrieve this.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="LmMessagePriv">LmMessagePriv</link>&#160;*<structfield>priv</structfield>;</term>
<listitem><simpara>A pointer to message private data. Should never be touched from application code.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="LmMessageType" role="enum">
<title>enum LmMessageType</title>
<indexterm zone="LmMessageType"><primary sortas="LmMessageType">LmMessageType</primary></indexterm><programlisting>typedef enum {
	LM_MESSAGE_TYPE_MESSAGE,
	LM_MESSAGE_TYPE_PRESENCE,
	LM_MESSAGE_TYPE_IQ,
	LM_MESSAGE_TYPE_STREAM,
	LM_MESSAGE_TYPE_STREAM_ERROR,
	LM_MESSAGE_TYPE_STREAM_FEATURES,
	LM_MESSAGE_TYPE_AUTH,
	LM_MESSAGE_TYPE_CHALLENGE,
	LM_MESSAGE_TYPE_RESPONSE,
	LM_MESSAGE_TYPE_SUCCESS,
	LM_MESSAGE_TYPE_FAILURE,
	LM_MESSAGE_TYPE_PROCEED,
	LM_MESSAGE_TYPE_STARTTLS,
	LM_MESSAGE_TYPE_UNKNOWN
} LmMessageType;
</programlisting>
<para>
Describes what type of message a message is. This maps directly to top level elements in the jabber protocol.
</para><variablelist role="enum">
<varlistentry id="LM-MESSAGE-TYPE-MESSAGE--CAPS" role="constant">
<term><literal>LM_MESSAGE_TYPE_MESSAGE</literal></term>
<listitem><simpara>a message, <message/>
</simpara></listitem>
</varlistentry>
<varlistentry id="LM-MESSAGE-TYPE-PRESENCE--CAPS" role="constant">
<term><literal>LM_MESSAGE_TYPE_PRESENCE</literal></term>
<listitem><simpara>a presence element, <presence/>
</simpara></listitem>
</varlistentry>
<varlistentry id="LM-MESSAGE-TYPE-IQ--CAPS" role="constant">
<term><literal>LM_MESSAGE_TYPE_IQ</literal></term>
<listitem><simpara>an info/query element, <iq/>
</simpara></listitem>
</varlistentry>
<varlistentry id="LM-MESSAGE-TYPE-STREAM--CAPS" role="constant">
<term><literal>LM_MESSAGE_TYPE_STREAM</literal></term>
<listitem><simpara>the stream:stream element, you probably don't need to create a message of this type.
</simpara></listitem>
</varlistentry>
<varlistentry id="LM-MESSAGE-TYPE-STREAM-ERROR--CAPS" role="constant">
<term><literal>LM_MESSAGE_TYPE_STREAM_ERROR</literal></term>
<listitem><simpara>a stream:error element
</simpara></listitem>
</varlistentry>
<varlistentry id="LM-MESSAGE-TYPE-STREAM-FEATURES--CAPS" role="constant">
<term><literal>LM_MESSAGE_TYPE_STREAM_FEATURES</literal></term>
<listitem><simpara>Internal
</simpara></listitem>
</varlistentry>
<varlistentry id="LM-MESSAGE-TYPE-AUTH--CAPS" role="constant">
<term><literal>LM_MESSAGE_TYPE_AUTH</literal></term>
<listitem><simpara>Internal
</simpara></listitem>
</varlistentry>
<varlistentry id="LM-MESSAGE-TYPE-CHALLENGE--CAPS" role="constant">
<term><literal>LM_MESSAGE_TYPE_CHALLENGE</literal></term>
<listitem><simpara>Internal
</simpara></listitem>
</varlistentry>
<varlistentry id="LM-MESSAGE-TYPE-RESPONSE--CAPS" role="constant">
<term><literal>LM_MESSAGE_TYPE_RESPONSE</literal></term>
<listitem><simpara>Internal
</simpara></listitem>
</varlistentry>
<varlistentry id="LM-MESSAGE-TYPE-SUCCESS--CAPS" role="constant">
<term><literal>LM_MESSAGE_TYPE_SUCCESS</literal></term>
<listitem><simpara>Internal
</simpara></listitem>
</varlistentry>
<varlistentry id="LM-MESSAGE-TYPE-FAILURE--CAPS" role="constant">
<term><literal>LM_MESSAGE_TYPE_FAILURE</literal></term>
<listitem><simpara>Internal
</simpara></listitem>
</varlistentry>
<varlistentry id="LM-MESSAGE-TYPE-PROCEED--CAPS" role="constant">
<term><literal>LM_MESSAGE_TYPE_PROCEED</literal></term>
<listitem><simpara>Internal
</simpara></listitem>
</varlistentry>
<varlistentry id="LM-MESSAGE-TYPE-STARTTLS--CAPS" role="constant">
<term><literal>LM_MESSAGE_TYPE_STARTTLS</literal></term>
<listitem><simpara>Internal
</simpara></listitem>
</varlistentry>
<varlistentry id="LM-MESSAGE-TYPE-UNKNOWN--CAPS" role="constant">
<term><literal>LM_MESSAGE_TYPE_UNKNOWN</literal></term>
<listitem><simpara>incoming message is of some unknown type.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="LmMessageSubType" role="enum">
<title>enum LmMessageSubType</title>
<indexterm zone="LmMessageSubType"><primary sortas="LmMessageSubType">LmMessageSubType</primary></indexterm><programlisting>typedef enum {
        LM_MESSAGE_SUB_TYPE_NOT_SET = -10,
	LM_MESSAGE_SUB_TYPE_AVAILABLE = -1,
	LM_MESSAGE_SUB_TYPE_NORMAL = 0,
	LM_MESSAGE_SUB_TYPE_CHAT,
        LM_MESSAGE_SUB_TYPE_GROUPCHAT,
        LM_MESSAGE_SUB_TYPE_HEADLINE,
        LM_MESSAGE_SUB_TYPE_UNAVAILABLE,
        LM_MESSAGE_SUB_TYPE_PROBE,
        LM_MESSAGE_SUB_TYPE_SUBSCRIBE,
        LM_MESSAGE_SUB_TYPE_UNSUBSCRIBE,
        LM_MESSAGE_SUB_TYPE_SUBSCRIBED,
        LM_MESSAGE_SUB_TYPE_UNSUBSCRIBED,
	LM_MESSAGE_SUB_TYPE_GET,
	LM_MESSAGE_SUB_TYPE_SET,
	LM_MESSAGE_SUB_TYPE_RESULT,
	LM_MESSAGE_SUB_TYPE_ERROR
} LmMessageSubType;
</programlisting>
<para>
Describes the sub type of a message. This is equal to the "type" attribute in the jabber protocol. What sub type a message can have is depending on the type of the message.
</para><variablelist role="enum">
<varlistentry id="LM-MESSAGE-SUB-TYPE-NOT-SET--CAPS" role="constant">
<term><literal>LM_MESSAGE_SUB_TYPE_NOT_SET</literal></term>
<listitem><simpara>the default. No "type" attribute will be sent.
</simpara></listitem>
</varlistentry>
<varlistentry id="LM-MESSAGE-SUB-TYPE-AVAILABLE--CAPS" role="constant">
<term><literal>LM_MESSAGE_SUB_TYPE_AVAILABLE</literal></term>
<listitem><simpara>presence is available, applies to message type "presence"
</simpara></listitem>
</varlistentry>
<varlistentry id="LM-MESSAGE-SUB-TYPE-NORMAL--CAPS" role="constant">
<term><literal>LM_MESSAGE_SUB_TYPE_NORMAL</literal></term>
<listitem><simpara>a normal message.
</simpara></listitem>
</varlistentry>
<varlistentry id="LM-MESSAGE-SUB-TYPE-CHAT--CAPS" role="constant">
<term><literal>LM_MESSAGE_SUB_TYPE_CHAT</literal></term>
<listitem><simpara>message is a chat message, applies to message type "message"
</simpara></listitem>
</varlistentry>
<varlistentry id="LM-MESSAGE-SUB-TYPE-GROUPCHAT--CAPS" role="constant">
<term><literal>LM_MESSAGE_SUB_TYPE_GROUPCHAT</literal></term>
<listitem><simpara>message is a group chat message, applies to message type "message"
</simpara></listitem>
</varlistentry>
<varlistentry id="LM-MESSAGE-SUB-TYPE-HEADLINE--CAPS" role="constant">
<term><literal>LM_MESSAGE_SUB_TYPE_HEADLINE</literal></term>
<listitem><simpara>message is a headline message, applies to message type "message"
</simpara></listitem>
</varlistentry>
<varlistentry id="LM-MESSAGE-SUB-TYPE-UNAVAILABLE--CAPS" role="constant">
<term><literal>LM_MESSAGE_SUB_TYPE_UNAVAILABLE</literal></term>
<listitem><simpara>presence is unavailable, applies to message type "presence"
</simpara></listitem>
</varlistentry>
<varlistentry id="LM-MESSAGE-SUB-TYPE-PROBE--CAPS" role="constant">
<term><literal>LM_MESSAGE_SUB_TYPE_PROBE</literal></term>
<listitem><simpara>a probe presence, applies to message type "presence"
</simpara></listitem>
</varlistentry>
<varlistentry id="LM-MESSAGE-SUB-TYPE-SUBSCRIBE--CAPS" role="constant">
<term><literal>LM_MESSAGE_SUB_TYPE_SUBSCRIBE</literal></term>
<listitem><simpara>try to subscribe to another jids presence, applies to message type "presence"
</simpara></listitem>
</varlistentry>
<varlistentry id="LM-MESSAGE-SUB-TYPE-UNSUBSCRIBE--CAPS" role="constant">
<term><literal>LM_MESSAGE_SUB_TYPE_UNSUBSCRIBE</literal></term>
<listitem><simpara>unsubscribes from another jids presence, applies to message type "presence"
</simpara></listitem>
</varlistentry>
<varlistentry id="LM-MESSAGE-SUB-TYPE-SUBSCRIBED--CAPS" role="constant">
<term><literal>LM_MESSAGE_SUB_TYPE_SUBSCRIBED</literal></term>
<listitem><simpara>reply from a subscribe message, informs that the subscription was successful. Applies to message type "presence"
</simpara></listitem>
</varlistentry>
<varlistentry id="LM-MESSAGE-SUB-TYPE-UNSUBSCRIBED--CAPS" role="constant">
<term><literal>LM_MESSAGE_SUB_TYPE_UNSUBSCRIBED</literal></term>
<listitem><simpara>reply from subscribe or unsubscribe message. If it's a reply from a subscribe message it notifies that the subscription failed. Applies to message type "presence"
</simpara></listitem>
</varlistentry>
<varlistentry id="LM-MESSAGE-SUB-TYPE-GET--CAPS" role="constant">
<term><literal>LM_MESSAGE_SUB_TYPE_GET</literal></term>
<listitem><simpara>used to get information from an IQ query, applies to message type "iq"
</simpara></listitem>
</varlistentry>
<varlistentry id="LM-MESSAGE-SUB-TYPE-SET--CAPS" role="constant">
<term><literal>LM_MESSAGE_SUB_TYPE_SET</literal></term>
<listitem><simpara>used to set information in a IQ call, applised to message type "iq"
</simpara></listitem>
</varlistentry>
<varlistentry id="LM-MESSAGE-SUB-TYPE-RESULT--CAPS" role="constant">
<term><literal>LM_MESSAGE_SUB_TYPE_RESULT</literal></term>
<listitem><simpara>message is an IQ reply, applies to message type "iq"
</simpara></listitem>
</varlistentry>
<varlistentry id="LM-MESSAGE-SUB-TYPE-ERROR--CAPS" role="constant">
<term><literal>LM_MESSAGE_SUB_TYPE_ERROR</literal></term>
<listitem><simpara>messages is an error, applies to all message types.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="lm-message-new" role="function">
<title>lm_message_new ()</title>
<indexterm zone="lm-message-new"><primary sortas="lm_message_new">lm_message_new</primary></indexterm><programlisting><link linkend="LmMessage">LmMessage</link> *         lm_message_new                      (const <link linkend="gchar">gchar</link> *to,
                                                         <link linkend="LmMessageType">LmMessageType</link> type);</programlisting>
<para>
Creates a new <link linkend="LmMessage"><type>LmMessage</type></link> which can be sent with <link linkend="lm-connection-send"><function>lm_connection_send()</function></link> or 
<link linkend="lm-connection-send-with-reply"><function>lm_connection_send_with_reply()</function></link>. If <parameter>to</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link> the message is sent to the
server. The returned message should be unreferenced with <link linkend="lm-message-unref"><function>lm_message_unref()</function></link> 
when caller is finished with it.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>to</parameter>&#160;:</term>
<listitem><simpara> receipient jid
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara> message type
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a newly created <link linkend="LmMessage"><type>LmMessage</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lm-message-new-with-sub-type" role="function">
<title>lm_message_new_with_sub_type ()</title>
<indexterm zone="lm-message-new-with-sub-type"><primary sortas="lm_message_new_with_sub_type">lm_message_new_with_sub_type</primary></indexterm><programlisting><link linkend="LmMessage">LmMessage</link> *         lm_message_new_with_sub_type        (const <link linkend="gchar">gchar</link> *to,
                                                         <link linkend="LmMessageType">LmMessageType</link> type,
                                                         <link linkend="LmMessageSubType">LmMessageSubType</link> sub_type);</programlisting>
<para>
Creates a new <link linkend="LmMessage"><type>LmMessage</type></link> with sub type set. See <link linkend="lm-message-new"><function>lm_message_new()</function></link> for more 
information.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>to</parameter>&#160;:</term>
<listitem><simpara> receipient jid
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara> message type
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sub_type</parameter>&#160;:</term>
<listitem><simpara> message sub type
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a newly created <link linkend="LmMessage"><type>LmMessage</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lm-message-get-type" role="function">
<title>lm_message_get_type ()</title>
<indexterm zone="lm-message-get-type"><primary sortas="lm_message_get_type">lm_message_get_type</primary></indexterm><programlisting><link linkend="LmMessageType">LmMessageType</link>       lm_message_get_type                 (<link linkend="LmMessage">LmMessage</link> *message);</programlisting>
<para>
Fetches the type of <parameter>message</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>message</parameter>&#160;:</term>
<listitem><simpara> an <link linkend="LmMessage"><type>LmMessage</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the message type
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lm-message-get-sub-type" role="function">
<title>lm_message_get_sub_type ()</title>
<indexterm zone="lm-message-get-sub-type"><primary sortas="lm_message_get_sub_type">lm_message_get_sub_type</primary></indexterm><programlisting><link linkend="LmMessageSubType">LmMessageSubType</link>    lm_message_get_sub_type             (<link linkend="LmMessage">LmMessage</link> *message);</programlisting>
<para>
Fetches the sub type of <parameter>message</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>message</parameter>&#160;:</term>
<listitem><simpara> an <link linkend="LmMessage"><type>LmMessage</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the message sub type
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lm-message-get-node" role="function">
<title>lm_message_get_node ()</title>
<indexterm zone="lm-message-get-node"><primary sortas="lm_message_get_node">lm_message_get_node</primary></indexterm><programlisting><link linkend="LmMessageNode">LmMessageNode</link> *     lm_message_get_node                 (<link linkend="LmMessage">LmMessage</link> *message);</programlisting>
<para>
Retrieves the root node from <parameter>message</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>message</parameter>&#160;:</term>
<listitem><simpara> an <link linkend="LmMessage"><type>LmMessage</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> an <link linkend="LmMessageNode"><type>LmMessageNode</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lm-message-ref" role="function">
<title>lm_message_ref ()</title>
<indexterm zone="lm-message-ref"><primary sortas="lm_message_ref">lm_message_ref</primary></indexterm><programlisting><link linkend="LmMessage">LmMessage</link> *         lm_message_ref                      (<link linkend="LmMessage">LmMessage</link> *message);</programlisting>
<para>
Adds a reference to <parameter>message</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>message</parameter>&#160;:</term>
<listitem><simpara> an <link linkend="LmMessage"><type>LmMessage</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the message
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="lm-message-unref" role="function">
<title>lm_message_unref ()</title>
<indexterm zone="lm-message-unref"><primary sortas="lm_message_unref">lm_message_unref</primary></indexterm><programlisting><link linkend="void">void</link>                lm_message_unref                    (<link linkend="LmMessage">LmMessage</link> *message);</programlisting>
<para>
Removes a reference from <parameter>message</parameter>. When no more references are present the 
message is freed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>message</parameter>&#160;:</term>
<listitem><simpara> an <link linkend="LmMessage"><type>LmMessage</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
