diff --git a/telepathy-farsight/stream.c b/telepathy-farsight/stream.c
index f58cda4..3ec69ff 100644
--- a/telepathy-farsight/stream.c
+++ b/telepathy-farsight/stream.c
@@ -998,7 +998,7 @@ static void
 cb_fs_new_local_candidate (TfStream *self,
     FsCandidate *candidate)
 {
-  DEBUG (self, "called");
+  DEBUG (self, "called", 0);
 
   self->priv->local_candidates = g_list_append (self->priv->local_candidates,
       fs_candidate_copy (candidate));
@@ -1007,7 +1007,7 @@ cb_fs_new_local_candidate (TfStream *self,
 static void
 cb_fs_local_candidates_prepared (TfStream *self)
 {
-  DEBUG (self, "called");
+  DEBUG (self, "called", 0);
 
   while (self->priv->local_candidates)
     {
@@ -1130,10 +1130,11 @@ tp_transports_to_fs (const gchar* foundation, const GPtrArray *transports)
 
   for (i=0; i< transports->len; i++)
     {
-      transport = g_ptr_array_index (transports, i);
       FsNetworkProtocol proto;
       FsCandidateType type;
 
+      transport = g_ptr_array_index (transports, i);
+
       g_assert(G_VALUE_HOLDS_UINT   (g_value_array_get_nth (transport, 0)));
       g_assert(G_VALUE_HOLDS_STRING (g_value_array_get_nth (transport, 1)));
       g_assert(G_VALUE_HOLDS_UINT   (g_value_array_get_nth (transport, 2)));
@@ -1402,7 +1403,7 @@ set_remote_codecs (TpMediaStreamHandler *proxy G_GNUC_UNUSED,
   guint i;
   GError *error = NULL;
 
-  DEBUG (self, "called");
+  DEBUG (self, "called", 0);
 
   for (i = 0; i < codecs->len; i++)
     {
@@ -1704,11 +1705,11 @@ stop_telephony_event (TpMediaStreamHandler *proxy G_GNUC_UNUSED,
 
   g_assert (self->priv->fs_session  != NULL);
 
-  DEBUG (self, "called");
+  DEBUG (self, "called", 0);
 
   if (!fs_session_stop_telephony_event (self->priv->fs_session,
           FS_DTMF_METHOD_AUTO))
-    WARNING (self, "stopping event failed");
+    WARNING (self, "stopping event failed", 0);
 }
 
 
@@ -1733,7 +1734,7 @@ close (TpMediaStreamHandler *proxy G_GNUC_UNUSED,
 {
   TfStream *self = TF_STREAM (object);
 
-  DEBUG (self, "close requested by connection manager");
+  DEBUG (self, "close requested by connection manager", 0);
 
   tf_stream_shutdown (self);
 }
@@ -1799,7 +1800,7 @@ invalidated_cb (TpMediaStreamHandler *proxy G_GNUC_UNUSED,
 {
   TfStream *stream = TF_STREAM (user_data);
 
-  DEBUG (stream, "proxy invalidated");
+  DEBUG (stream, "proxy invalidated", 0);
 
   if (stream->priv->stream_handler_proxy)
     {
@@ -1983,7 +1984,7 @@ _tf_stream_bus_message (TfStream *stream,
       if (fssession != stream->priv->fs_session)
         return FALSE;
 
-      DEBUG (stream, "Codecs changed");
+      DEBUG (stream, "Codecs changed", 0);
 
       _tf_stream_try_sending_codecs (stream);
     }
@@ -2130,7 +2131,7 @@ _tf_stream_try_sending_codecs (TfStream *stream)
   if (!ready && stream->priv->has_resource & TP_MEDIA_STREAM_DIRECTION_SEND)
     {
       DEBUG (stream, "Ignoring new codecs because we're sending,"
-          " but we're not ready");
+          " but we're not ready", 0);
       return;
     }
 
@@ -2147,7 +2148,7 @@ _tf_stream_try_sending_codecs (TfStream *stream)
     {
       tpcodecs = fs_codecs_to_tp (stream, fscodecs);
 
-      DEBUG (stream, "calling MediaStreamHandler::Ready");
+      DEBUG (stream, "calling MediaStreamHandler::Ready", 0);
       tp_cli_media_stream_handler_call_ready (
           stream->priv->stream_handler_proxy,
           -1, tpcodecs, async_method_callback, "Media.StreamHandler::Ready",
@@ -2160,7 +2161,7 @@ _tf_stream_try_sending_codecs (TfStream *stream)
     {
       tpcodecs = fs_codecs_to_tp (stream, fscodecs);
 
-      DEBUG (stream, "calling MediaStreamHandler::SupportedCodecs");
+      DEBUG (stream, "calling MediaStreamHandler::SupportedCodecs", 0);
       tp_cli_media_stream_handler_call_supported_codecs (
           stream->priv->stream_handler_proxy,
           -1, tpcodecs, async_method_callback,
@@ -2175,7 +2176,7 @@ _tf_stream_try_sending_codecs (TfStream *stream)
     {
       tpcodecs = fs_codecs_to_tp (stream, fscodecs);
 
-      DEBUG (stream, "calling MediaStreamHandler::CodecsUpdated");
+      DEBUG (stream, "calling MediaStreamHandler::CodecsUpdated", 0);
       tp_cli_media_stream_handler_call_codecs_updated (
           stream->priv->stream_handler_proxy,
           -1, tpcodecs, async_method_callback,
