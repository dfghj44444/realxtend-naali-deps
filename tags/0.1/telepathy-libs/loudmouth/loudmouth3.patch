diff --git a/loudmouth/asyncns.c b/loudmouth/asyncns.c
index 9b238fa..004e08c 100644
--- a/loudmouth/asyncns.c
+++ b/loudmouth/asyncns.c
@@ -25,18 +25,35 @@
 #include <assert.h>
 #include <fcntl.h>
 #include <signal.h>
+#ifndef WIN32
 #include <unistd.h>
 #include <sys/select.h>
+#else
+#include <windows.h>
+#include "io.h"
+#endif
 #include <stdio.h>
+#ifndef G_OS_WIN32
 #include <string.h>
+#endif
 #include <stdlib.h>
 #include <errno.h>
+#ifndef WIN32 
 #include <sys/wait.h>
+#endif
 #include <sys/types.h>
+#ifndef WIN32 
 #include <pwd.h>
+#endif
+#include <sys/types.h>
+
+#if HAVE_NETINET_IN_H
 #include <netinet/in.h>
+#endif
+#ifndef G_OS_WIN32
 #include <arpa/nameser.h>
 #include <resolv.h>
+#endif
 
 #ifdef HAVE_SYS_PRCTL_H
 #include <sys/prctl.h>
diff --git a/loudmouth/lm-connection.c b/loudmouth/lm-connection.c
index 915c0ad..0622a9c 100644
--- a/loudmouth/lm-connection.c
+++ b/loudmouth/lm-connection.c
@@ -32,11 +32,17 @@
 #include <netinet/in.h>
 #endif
 
+#ifndef WIN32
 #include <arpa/nameser.h>
 #include <resolv.h>
+#endif
 
 #include <glib.h>
 
+#ifdef WIN32
+#include <stdio.h> 
+#endif
+
 #include "lm-sock.h"
 #include "lm-debug.h"
 #include "lm-error.h"
diff --git a/loudmouth/lm-sock.c b/loudmouth/lm-sock.c
index 456d1b9..f76210b 100644
--- a/loudmouth/lm-sock.c
+++ b/loudmouth/lm-sock.c
@@ -21,7 +21,12 @@
 #include <config.h>
 
 #include <glib.h>
-#include <glib/gi18n.h>
+
+#ifndef WIN32        /* on windows turn off the gettext() and do not link with libintl */
+#include <glib/gi18n.h>
+#else
+#define _(str) str
+#endif
 
 #ifndef G_OS_WIN32
 
@@ -128,19 +133,28 @@ _lm_sock_set_blocking (LmSocketT sock,
 		       gboolean block)
 {
 	int res;
+	int wsa_error;
 
 #ifndef G_OS_WIN32
 	res = fcntl (sock, F_SETFL, block ? 0 : O_NONBLOCK);
 #else  /* G_OS_WIN32 */
 	u_long mode = (block ? 0 : 1);
-	res = ioctlsocket (sock, FIONBIO, &mode);
+	wsa_error = WSAGetLastError();
 #endif /* G_OS_WIN32 */
 
+#ifndef G_OS_WIN32
 	if (res != 0) {
 		g_log (LM_LOG_DOMAIN, LM_LOG_LEVEL_NET,
 		       "Could not set connection to be %s\n",
 		       block ? "blocking" : "non-blocking");
 	}
+#else
+	if (wsa_error != 0) {
+		g_log (LM_LOG_DOMAIN, LM_LOG_LEVEL_NET,
+		       "Could not set connection to be %s\n",
+		       block ? "blocking" : "non-blocking");
+	}	
+#endif /* G_OS_WIN32 */
 }
 
 void
@@ -295,8 +309,10 @@ _lm_sock_addrinfo_get_error_str (int err)
 		return _("The remote host exists but no address "
 			 "is available");
 #endif
+#ifndef G_OS_WIN32
 	case EAI_NONAME:   
 		return _("The remote address is unknown");
+#endif
 	case EAI_FAMILY:
 	case EAI_SERVICE:
 	case EAI_SOCKTYPE:
@@ -339,6 +355,32 @@ _lm_sock_set_keepalive (LmSocketT sock, int delay)
 }
 #endif /* USE_TCP_KEEPALIVES */
 
+
+#ifdef G_OS_WIN32
+const char *inet_ntop_windows(int af, const void *src, char *dst, socklen_t cnt)
+{
+    if (af == AF_INET) {
+        struct sockaddr_in in;
+        memset(&in, 0, sizeof(in));
+        in.sin_family = AF_INET;
+        memcpy(&in.sin_addr, src, sizeof(struct in_addr));
+        getnameinfo((struct sockaddr *)&in, sizeof(struct sockaddr_in), dst, cnt, NULL, 0, NI_NUMERICHOST);
+        return dst;
+    }
+    else if (af == AF_INET6) {
+        struct sockaddr_in6 in;
+        memset(&in, 0, sizeof(in));
+        in.sin6_family = AF_INET6;
+        memcpy(&in.sin6_addr, src, sizeof(struct in_addr6));
+        getnameinfo((struct sockaddr *)&in, sizeof(struct sockaddr_in6), dst, cnt, NULL, 0, NI_NUMERICHOST);
+        return dst;
+    }
+
+    return NULL;
+}
+#endif
+
+
 gchar *
 _lm_sock_get_local_host (LmSocketT sock)
 {
@@ -364,12 +406,19 @@ _lm_sock_get_local_host (LmSocketT sock)
 		default:
 			return NULL;
 	}
+#ifdef G_OS_WIN32
+	host = inet_ntop_windows(addr_info.sa_family,
+			  sock_addr,
+			  addrbuf,
+			  IPV6_MAX_ADDRESS_LEN);
+#else
 	/* inet_ntoa has been obsoleted in favour of inet_ntop */
 	host = inet_ntop (addr_info.sa_family,
 			  sock_addr,
 			  addrbuf,
 			  IPV6_MAX_ADDRESS_LEN);
-
+#endif
 	return g_strdup (host);
+
 }
 
diff --git a/loudmouth/lm-socket.c b/loudmouth/lm-socket.c
index 63ef84f..12bed08 100644
--- a/loudmouth/lm-socket.c
+++ b/loudmouth/lm-socket.c
@@ -23,6 +23,9 @@
 #include <config.h>
 
 #include <string.h>
+#ifdef WIN32
+#include <stdio.h>
+#endif
 #include <sys/types.h>
 
 /* Needed on Mac OS X */
@@ -35,8 +38,17 @@
 #include <arpa/nameser_compat.h>
 #endif
 
+#ifndef WIN32
 #include <arpa/nameser.h>
 #include <resolv.h>
+#else
+#include <Winsock2.h>
+#include <Windns.h>
+#ifndef DNS_TYPE_SRV  /* on mingw this is not defined */
+  /* Service location */
+  #define DNS_TYPE_SRV 0x21  // 33
+ #endif
+#endif
 
 #include "lm-debug.h"
 #include "lm-internals.h"
@@ -120,10 +132,14 @@ static gboolean     socket_error_event        (GIOChannel     *source,
 static gboolean     socket_buffered_write_cb  (GIOChannel     *source, 
 					       GIOCondition    condition,
 					       LmSocket       *socket);
+
+#ifndef WIN32
 static gboolean     socket_parse_srv_response (unsigned char  *srv, 
 					       int             srv_len, 
 					       gchar         **out_server, 
 					       guint          *out_port);
+#endif
+
 static void         socket_close_io_channel   (GIOChannel     *io_channel);
 
 static void
@@ -739,6 +755,8 @@ socket_buffered_write_cb (GIOChannel   *source,
 	return TRUE;
 }
 
+
+#ifndef WIN32
 static gboolean
 socket_parse_srv_response (unsigned char  *srv, 
 			   int             srv_len, 
@@ -800,6 +818,7 @@ socket_parse_srv_response (unsigned char  *srv,
 	} 
 	return FALSE;
 }
+#endif
 
 static void
 socket_close_io_channel (GIOChannel *io_channel)
@@ -821,6 +840,59 @@ _lm_socket_create_phase1 (LmSocket *socket, unsigned char *srv_ans, int len);
 static void
 _lm_socket_create_phase2 (LmSocket *socket, struct addrinfo *ans);
 
+#ifdef WIN32
+static void
+_lm_socket_create_phase1_win32 (LmSocket *socket,
+			  unsigned char* srv_name,
+			  int srv_port)
+{
+	const char          *remote_addr;
+	LmConnectData       *data;
+	struct addrinfo      req;
+#ifndef HAVE_ASYNCNS
+	struct addrinfo *ans;
+	int              err;
+#endif
+
+	g_free (socket->server);
+	socket->server = srv_name;
+	socket->port = srv_port;
+
+	/* If server wasn't specified and SRV failed, use domain */
+	if (!socket->server) {
+		lm_verbose ("SRV lookup failed, trying jid domain\n");
+		socket->server = g_strdup (socket->domain);
+	}
+
+	if (socket->proxy) {
+		remote_addr = lm_proxy_get_server (socket->proxy);
+	} else {
+		remote_addr = socket->server;
+	}
+
+	g_log (LM_LOG_DOMAIN, LM_LOG_LEVEL_NET,
+	       "Going to connect to %s%s:%u\n", (socket->proxy) ? "proxy " : "",
+	       remote_addr, socket->port);
+
+	data = g_new0 (LmConnectData, 1);
+
+	data->socket        = socket;
+	data->connection    = socket->connection;
+	data->fd            = -1;
+	socket->connect_data = data;
+
+	memset (&req, 0, sizeof(req));
+	req.ai_family   = AF_UNSPEC;
+	req.ai_socktype = SOCK_STREAM;
+	req.ai_protocol = IPPROTO_TCP;
+
+	err = getaddrinfo (remote_addr, NULL, &req, &ans);
+	_lm_socket_create_phase2 (socket, (err) ? NULL : ans);
+	if (err != 0)
+		return;
+}
+#endif
+
 #ifdef HAVE_ASYNCNS
 #define PHASE_1 0
 #define PHASE_2 1
@@ -950,6 +1022,7 @@ _lm_socket_create_phase1 (LmSocket *socket,
 	int              err;
 #endif
 
+#ifndef WIN32
 	if (srv_ans != NULL) {
 		gchar    *new_server;
 		guint     new_port;
@@ -963,6 +1036,7 @@ _lm_socket_create_phase1 (LmSocket *socket,
 			socket->port = new_port;
 		}
 	}
+#endif
 
 	/* If server wasn't specified and SRV failed, use domain */
 	if (!socket->server) {
@@ -1050,11 +1124,15 @@ lm_socket_create (GMainContext      *context,
 {
 	LmSocket        *socket;
 
-#ifndef HAVE_ASYNCNS
+#if !defined(HAVE_ASYNCNS) && !defined(WIN32)
 	unsigned char    srv_ans[SRV_LEN];
 	int              len;
 #endif
-	
+#if defined (_WIN32) || defined (WIN32)
+    DNS_STATUS      dns_status;
+    PDNS_RECORD     dns_record;
+#endif
+
 	g_return_val_if_fail (domain != NULL, NULL);
 	g_return_val_if_fail ((port >= MIN_PORT && port <= MAX_PORT), NULL);
 	g_return_val_if_fail (data_func != NULL, NULL);
@@ -1096,11 +1174,24 @@ lm_socket_create (GMainContext      *context,
 			asyncns_res_query (socket->asyncns_ctx, srv, C_IN, T_SRV);
 		asyncns_setuserdata (socket->asyncns_ctx, socket->resolv_query, (gpointer) PHASE_1);
 #else
+#ifndef WIN32
 		res_init ();
 
 		len = res_query (srv, C_IN, T_SRV, srv_ans, SRV_LEN);
 		_lm_socket_create_phase1 (socket, (len < 1) ? NULL : srv_ans, len);
 		g_free (srv);
+#else 
+		dns_status = DnsQuery_A(srv, DNS_TYPE_SRV, DNS_QUERY_BYPASS_CACHE, NULL, &dns_record, NULL);
+		if (dns_status != NO_ERROR) {
+			lm_verbose ("SRV lookup failed for %s\n", socket->server);
+			_lm_socket_create_phase1 (socket, NULL, 0);
+		}
+		else if (dns_record != NULL) {
+			_lm_socket_create_phase1_win32 (socket, g_strdup(dns_record->pName), dns_record->Data.SRV.wPort);
+			DnsRecordListFree(dns_record, 0);
+		}
+		g_free (srv);
+#endif
 #endif
 	} else {
 		lm_verbose ("SRV lookup disabled for %s\n", socket->server);
diff --git a/loudmouth/lm-ssl-gnutls.c b/loudmouth/lm-ssl-gnutls.c
index 443c3f3..2701e35 100644
--- a/loudmouth/lm-ssl-gnutls.c
+++ b/loudmouth/lm-ssl-gnutls.c
@@ -20,6 +20,10 @@
 
 #include <config.h>
 
+#ifdef WIN32
+#define ssize_t long
+#endif
+
 #include <string.h>
 #include <glib.h>
 
@@ -178,6 +182,10 @@ _lm_ssl_new (const gchar    *expected_fingerprint,
 			   expected_fingerprint,
 			   ssl_function, user_data, notify);
 
+#ifdef WIN32
+	gnutls_global_set_log_level(9);
+#endif
+
 	return ssl;
 }
 
diff --git a/loudmouth/lm-ssl-openssl.c b/loudmouth/lm-ssl-openssl.c
index cd967ab..1a75c90 100644
--- a/loudmouth/lm-ssl-openssl.c
+++ b/loudmouth/lm-ssl-openssl.c
@@ -23,7 +23,11 @@
 
 #include <stdio.h>
 #include <string.h>
-#include <unistd.h>
+
+#ifndef WIN32
+#include <unistd.h>
+#endif
+
 #include <glib.h>
 
 #include "lm-debug.h"
